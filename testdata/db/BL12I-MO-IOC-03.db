



#! Generated by VisualDCT v2.6

# BLGui-device.template
# This BLGui-device.template is used to define how many temperatures,
# water flow switches and currents are present in a device
# It also provides a gda interface to the SHORTNAME and DESCRIPTION
# The ao records defined by this template are used purely to serve a value
# to the user interface so that it can automatically configure generic screens
# appropriately.
# See the BLdiag module ReadMe for MTYPE substitutions
record(ao, "BL12I-AL-ATTN-02:INFO:NFLOW") {
  field(VAL, "1")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-ATTN-02:INFO:NTEMP") {
  field(VAL, "0")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-ATTN-02:INFO:MTYPE") {
  field(VAL, "0")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-ATTN-02:INFO:NCURR") {
  field(VAL, "0")
  field(PINI, "YES")
}

# Name and DESCRIPTION for a device
# % gda,device,A2,ALL,11,SiC filters
record(stringout, "BL12I-AL-ATTN-02:NAME") {
  field(DESC, "SiC filters")
  field(VAL, "A2")
  field(PINI, "YES")
}

#! Generated by VisualDCT v2.6

# BLGui-device.template
# This BLGui-device.template is used to define how many temperatures,
# water flow switches and currents are present in a device
# It also provides a gda interface to the SHORTNAME and DESCRIPTION
# The ao records defined by this template are used purely to serve a value
# to the user interface so that it can automatically configure generic screens
# appropriately.
# See the BLdiag module ReadMe for MTYPE substitutions
record(ao, "BL12I-AL-SLITS-02:INFO:NFLOW") {
  field(VAL, "1")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-SLITS-02:INFO:NTEMP") {
  field(VAL, "8")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-SLITS-02:INFO:MTYPE") {
  field(VAL, "0")
  field(PINI, "YES")
}

record(ao, "BL12I-AL-SLITS-02:INFO:NCURR") {
  field(VAL, "0")
  field(PINI, "YES")
}

# Name and DESCRIPTION for a device
# % gda,device,S2,ALL,21,High definition slits
record(stringout, "BL12I-AL-SLITS-02:NAME") {
  field(DESC, "High definition slits")
  field(VAL, "S2")
  field(PINI, "YES")
}






#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-ATTN-02:DEVSTA") {
  field(SCAN, "1 second")
  field(PHAS, "4")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0?1:0")
  field(INPA, "BL12I-AL-ATTN-02:FLOWSTA MS")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}

#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-ATTN-02:FLOWSTA") {
  field(SCAN, "1 second")
  field(PHAS, "2")
  field(CALC, "0")
  field(INPA, "BL12I-AL-ATTN-02:WFS:LO MS")
  field(INPB, "BL12I-AL-ATTN-02:WFS:LOLO MS")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}

#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-SLITS-02:DEVSTA") {
  field(SCAN, "1 second")
  field(PHAS, "4")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0?1:0")
  field(INPA, "BL12I-AL-SLITS-02:FLOWSTA MS")
  field(INPB, "BL12I-AL-SLITS-02:TEMPSTA MS")
  field(INPC, "BL12I-AL-SLITS-02:MOTORSTA MS")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}

#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-SLITS-02:FLOWSTA") {
  field(SCAN, "1 second")
  field(PHAS, "2")
  field(CALC, "0")
  field(INPA, "BL12I-AL-SLITS-02:WFS:LO MS")
  field(INPB, "BL12I-AL-SLITS-02:WFS:LOLO MS")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}

#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-SLITS-02:MOTORSTA") {
  field(SCAN, "1 second")
  field(PHAS, "2")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0?1:0")
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.MOVN MS")
  field(INPB, "BL12I-AL-SLITS-02:X:MINUS.MOVN MS")
  field(INPC, "BL12I-AL-SLITS-02:Y:PLUS.MOVN MS")
  field(INPD, "BL12I-AL-SLITS-02:Y:MINUS.MOVN MS")
  field(INPE, "BL12I-AL-SLITS-02:Y:SIZE.MOVN MS")
  field(INPF, "BL12I-AL-SLITS-02:Y:CENTER.MOVN MS")
  field(INPG, "BL12I-AL-SLITS-02:X:SIZE.MOVN MS")
  field(INPH, "BL12I-AL-SLITS-02:X:CENTER.MOVN MS")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}

#! Generated by VisualDCT v2.6

# This record links to up to twelve other records and generates an overall
# alarm based on the maximise severity.
# Substitutions:
# P  - name of the alarm summary record
# CALC  - optional CALCulation to perform on the linked PV's or set to a constant value
# INPA,INPB,..INPL    - link to up to 12 PV's
record(calc, "BL12I-AL-SLITS-02:TEMPSTA") {
  field(SCAN, "1 second")
  field(PHAS, "2")
  field(CALC, "0")
  field(INPA, "BL12I-AL-SLITS-02:TEMP1 MS")
  field(INPB, "BL12I-AL-SLITS-02:TEMP2 MS")
  field(INPC, "BL12I-AL-SLITS-02:TEMP3 MS")
  field(INPD, "BL12I-AL-SLITS-02:TEMP4 MS")
  field(INPE, "BL12I-AL-SLITS-02:TEMP5 MS")
  field(INPF, "BL12I-AL-SLITS-02:TEMP6 MS")
  field(INPG, "BL12I-AL-SLITS-02:TEMP7 MS")
  field(INPH, "BL12I-AL-SLITS-02:TEMP8 MS")
  field(INPI, "0")
  field(INPJ, "0")
  field(INPK, "0")
  field(INPL, "0")
  field(ACKT, "NO")
}






#! Generated by VisualDCT v2.6

# % macro, __doc__, Template for controlling many positioner or
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix
# % macro, MP, Device suffix
# % macro, DESC, Multipositioner description
# % macro, STRA, String description for position 1
# % macro, STRB, String description for position 2
# % macro, STRC, String description for position 3
# % macro, STRD, String description for position 4
# % macro, STRE, String description for position 5
# % macro, STRF, String description for position 6
# % macro, STRG, String description for position 7
# % macro, STRH, String description for position 8
# % macro, STRI, String description for position 9
# % macro, STRJ, String description for position 10
# % macro, STRK, String description for position 11
# % macro, STRL, String description for position 12
# % macro, STRM, String description for position 13
# % macro, STRN, String description for position 14
# % macro, STRO, String description for position 15
# % macro, STRP, String description for position 16
# % macro, name, Object name and gui association name
# % macro, gda_name, If set, export to GDA with this name
# % macro, gda_desc, Description for GDA
# % macro, NPOS, Number of positioners, used to work out which screen to use.
# Only specify if not using the builder object.
# % macro, P1, Positioner 1 suffix for screen.
# Only specify if not using the builder object.
# % macro, P2, Positioner 2 suffix for screen.
# Only specify if not using the builder object.
# % macro, P3, Positioner 3 suffix for screen.
# Only specify if not using the builder object.
# % macro, P4, Positioner 4 suffix for screen.
# Only specify if not using the builder object.
# % macro, P5, Positioner 5 suffix for screen.
# Only specify if not using the builder object.
# % macro, P6, Positioner 6 suffix for screen.
# Only specify if not using the builder object.
# % macro, P7, Positioner 7 suffix for screen.
# Only specify if not using the builder object.
# % macro, P8, Positioner 8 suffix for screen.
# Only specify if not using the builder object.
# This associates an edm screen with the template
# % gui, , edmembed, pos-3pos.edl, P=BL12I-AL-ATTN-02,MP=:MP2,filename=motor.edl,P1=,P2=,P3=,P4=,P5=,P6=,P7=,P8=
# List of names for selection by user.
# Severity is returned via DISA.
# DISV set to 2 to stop disabling.
# % autosave 0 VAL
# % autosave 2 ZRST ONST TWST THST FRST FVST SXST SVST EIST NIST TEST ELST TVST TTST FTST FFST
# % gdatag,template,positioner,f2.pos,Cu filter stick 1
# % gdatag,mbbinary,rw,f2.pos,SELECT,Position Selection
record(mbbo, "BL12I-AL-ATTN-02:MP2:SELECT") {
  field(DESC, "Cu filter stick 1")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(ZRST, "2mm")
  field(ONST, "clear")
  field(TWST, "8mm")
  field(THST, "")
  field(FRST, "")
  field(FVST, "")
  field(SXST, "")
  field(FLNK, "BL12I-AL-ATTN-02:MP2:START PP MS")
  field(SVST, "")
  field(EIST, "")
  field(NIST, "")
  field(TEST, "")
  field(ELST, "")
  field(PINI, "YES")
  field(DISV, "2")
  field(VAL, "0")
  field(TVST, "")
  field(TTST, "")
  field(FTST, "")
  field(FFST, "")
}

# Open a gate on each positioner.
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP2:SFANOUT") {
  field(DESC, "Fanout start motion")
  field(SELM, "All")
  field(VAL, "0")
}

# On selection make sure all gates are open before motion
record(fanout, "BL12I-AL-ATTN-02:MP2:FANOUT") {
  field(LNK1, "BL12I-AL-ATTN-02:MP2:SFANOUT PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP2:DFANOUTA PP MS")
  field(DESC, "Fanout of processing")
}

# This PV is a good indication of severity
# % gui, , sevr
# Combined done moving indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
# % gdatag,pv,ro,f2.pos,DMOV,Done Moving Indicator
record(calcout, "BL12I-AL-ATTN-02:MP2:DMOV") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Positioner done moving")
  field(OUT, "BL12I-AL-ATTN-02:MP2:BUSY CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use OCAL")
  field(OCAL, "(A&B&C&D&E&F&G&H)?0:1")
}

# Test opening of gates by waiting between open gate and move commands
# To use this change the FLNK of VALUE to point to this.
record(seq, "BL12I-AL-ATTN-02:MP2:FANOUT2") {
  field(DESC, "Wait before sending val")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(DOL1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:MP2:SFANOUT.PROC PP MS")
  field(DLY2, "5")
  field(LNK2, "BL12I-AL-ATTN-02:MP2:DFANOUTA.PROC PP MS")
}

#% autosave 0 INPA INPB INPC INPD INPE INPF INPG INPH
#% gdatag,pv,ro,f2.pos,ERROR,Error Indicator,<pv>.K
record(transform, "BL12I-AL-ATTN-02:MP2:ERROR") {
  field(DESC, "Errors from positioners")
  field(FLNK, "BL12I-AL-ATTN-02:MP2:SETERROR1 PP MS")
  field(CLCI, "MAX(MAX(A,B),MAX(C,D))")
  field(CLCJ, "MAX(MAX(E,F),MAX(G,H))")
  field(CLCK, "MAX(I,J)")
  field(INPA, "0")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
}

# Check if value has changed from previous call.
# This stops infinite loops when passing MS back
# % autosave 0 VAL
record(calcout, "BL12I-AL-ATTN-02:MP2:GATE") {
  field(DESC, "Stop repeated output")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#B)||((~C)&D)")
  field(INPA, "BL12I-AL-ATTN-02:MP2:SELECT NPP MS")
  field(INPB, "BL12I-AL-ATTN-02:MP2:VALUE")
  field(OUT, "BL12I-AL-ATTN-02:MP2:VALUE PP MS")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
  field(INPC, "BL12I-AL-ATTN-02:MP2:INPOS")
  field(INPD, "BL12I-AL-ATTN-02:MP2:DMOV")
}

# Stores last selected value. This enables the gate record to check if the value has changed.
# Initially set to -1 to ensure first value is selected correctly.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:MP2:VALUE") {
  field(DESC, "Value selected")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP2:FANOUT")
  field(VAL, "-1")
}

# Add 1 to selection to allow 1st seq to work
record(calc, "BL12I-AL-ATTN-02:MP2:SELECT1") {
  field(DESC, "Selection+1")
  field(CALC, "A+1")
  field(INPA, "BL12I-AL-ATTN-02:MP2:SELECT.VAL")
}

# Sets error severities for 2nd 6 positions
record(seq, "BL12I-AL-ATTN-02:MP2:SETERROR2") {
  field(DESC, "Sets errors in SELECT")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP2:SELECT2.VAL PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP2:SELECT.EISV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP2:SELECT.NISV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP2:SELECT.TESV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP2:SELECT.ELSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP2:SELECT.TVSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP2:SELECT.TTSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP2:SELECT.FTSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP2:SELECT.FFSV PP MS")
}

# Select the correct link from the second sequence
record(calc, "BL12I-AL-ATTN-02:MP2:SELECT2") {
  field(DESC, "Selection-7")
  field(CALC, "A-7")
  field(INPA, "BL12I-AL-ATTN-02:MP2:SELECT.VAL")
}

# Sets error severities for 1st 6 positions
record(seq, "BL12I-AL-ATTN-02:MP2:SETERROR1") {
  field(DESC, "Sets errors in SELECT")
  field(FLNK, "BL12I-AL-ATTN-02:MP2:SETERROR2")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP2:SELECT1 PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP2:SELECT.ZRSV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP2:SELECT.ONSV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP2:SELECT.TWSV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP2:SELECT.THSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP2:SELECT.FRSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP2:SELECT.FVSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP2:SELECT.SXSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP2:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP2:SELECT.SVSV PP MS")
}

# Stores types of underlying positioners
# 0 = Undefined
# 1 = Normal
# 2 = Motor
#% autosave 0 A B C D E F G H
record(calcout, "BL12I-AL-ATTN-02:MP2:TYPE") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "0")
  field(B, "0")
  field(C, "0")
  field(D, "0")
  field(E, "0")
  field(F, "0")
  field(G, "0")
  field(H, "0")
  field(DESC, "Types of positioner")
}

# Record to allow EDM to process changes of strings.
record(bo, "BL12I-AL-ATTN-02:MP2:UPDATE") {
  field(DESC, "Dummy for EDM")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Updating")
  field(ONAM, "Normal")
}

# Combined in position indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
#% gdatag,pv,ro,f2.pos,INPOS,In Position Indicator
record(calcout, "BL12I-AL-ATTN-02:MP2:INPOS") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Combined in position monitor")
}

#% gdatag,pv,rw,f2.pos,STOP,Stop Button,<pv>.PROC
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP2:STOP") {
  field(DESC, "Stop all motors")
  field(VAL, "1")
  field(SELM, "All")
}

# This makes the component icon reflect the status
# % gui, , status
record(busy, "BL12I-AL-ATTN-02:MP2:BUSY") {
}

record(fanout, "BL12I-AL-ATTN-02:MP2:START") {
  field(LNK1, "BL12I-AL-ATTN-02:MP2:GATE PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP2:BUSY")
}

# Fans selected position number to each separate controller
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP2:DFANOUTA") {
  field(DESC, "Fanout selection")
  field(SELM, "All")
  field(DOL, "BL12I-AL-ATTN-02:MP2:VALUE.VAL")
  field(OMSL, "closed_loop")
}

#! Generated by VisualDCT v2.6

# % macro, __doc__, Template for controlling many positioner or
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix
# % macro, MP, Device suffix
# % macro, DESC, Multipositioner description
# % macro, STRA, String description for position 1
# % macro, STRB, String description for position 2
# % macro, STRC, String description for position 3
# % macro, STRD, String description for position 4
# % macro, STRE, String description for position 5
# % macro, STRF, String description for position 6
# % macro, STRG, String description for position 7
# % macro, STRH, String description for position 8
# % macro, STRI, String description for position 9
# % macro, STRJ, String description for position 10
# % macro, STRK, String description for position 11
# % macro, STRL, String description for position 12
# % macro, STRM, String description for position 13
# % macro, STRN, String description for position 14
# % macro, STRO, String description for position 15
# % macro, STRP, String description for position 16
# % macro, name, Object name and gui association name
# % macro, gda_name, If set, export to GDA with this name
# % macro, gda_desc, Description for GDA
# % macro, NPOS, Number of positioners, used to work out which screen to use.
# Only specify if not using the builder object.
# % macro, P1, Positioner 1 suffix for screen.
# Only specify if not using the builder object.
# % macro, P2, Positioner 2 suffix for screen.
# Only specify if not using the builder object.
# % macro, P3, Positioner 3 suffix for screen.
# Only specify if not using the builder object.
# % macro, P4, Positioner 4 suffix for screen.
# Only specify if not using the builder object.
# % macro, P5, Positioner 5 suffix for screen.
# Only specify if not using the builder object.
# % macro, P6, Positioner 6 suffix for screen.
# Only specify if not using the builder object.
# % macro, P7, Positioner 7 suffix for screen.
# Only specify if not using the builder object.
# % macro, P8, Positioner 8 suffix for screen.
# Only specify if not using the builder object.
# This associates an edm screen with the template
# % gui, , edmembed, pos-3pos.edl, P=BL12I-AL-ATTN-02,MP=:MP3,filename=motor.edl,P1=,P2=,P3=,P4=,P5=,P6=,P7=,P8=
# List of names for selection by user.
# Severity is returned via DISA.
# DISV set to 2 to stop disabling.
# % autosave 0 VAL
# % autosave 2 ZRST ONST TWST THST FRST FVST SXST SVST EIST NIST TEST ELST TVST TTST FTST FFST
# % gdatag,template,positioner,f3.pos,Cu filter stick 2
# % gdatag,mbbinary,rw,f3.pos,SELECT,Position Selection
record(mbbo, "BL12I-AL-ATTN-02:MP3:SELECT") {
  field(DESC, "Cu filter stick 2")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(ZRST, "1mm")
  field(ONST, "clear")
  field(TWST, "4mm")
  field(THST, "")
  field(FRST, "")
  field(FVST, "")
  field(SXST, "")
  field(FLNK, "BL12I-AL-ATTN-02:MP3:START PP MS")
  field(SVST, "")
  field(EIST, "")
  field(NIST, "")
  field(TEST, "")
  field(ELST, "")
  field(PINI, "YES")
  field(DISV, "2")
  field(VAL, "0")
  field(TVST, "")
  field(TTST, "")
  field(FTST, "")
  field(FFST, "")
}

# Open a gate on each positioner.
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP3:SFANOUT") {
  field(DESC, "Fanout start motion")
  field(SELM, "All")
  field(VAL, "0")
}

# On selection make sure all gates are open before motion
record(fanout, "BL12I-AL-ATTN-02:MP3:FANOUT") {
  field(LNK1, "BL12I-AL-ATTN-02:MP3:SFANOUT PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP3:DFANOUTA PP MS")
  field(DESC, "Fanout of processing")
}

# This PV is a good indication of severity
# % gui, , sevr
# Combined done moving indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
# % gdatag,pv,ro,f3.pos,DMOV,Done Moving Indicator
record(calcout, "BL12I-AL-ATTN-02:MP3:DMOV") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Positioner done moving")
  field(OUT, "BL12I-AL-ATTN-02:MP3:BUSY CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use OCAL")
  field(OCAL, "(A&B&C&D&E&F&G&H)?0:1")
}

# Test opening of gates by waiting between open gate and move commands
# To use this change the FLNK of VALUE to point to this.
record(seq, "BL12I-AL-ATTN-02:MP3:FANOUT2") {
  field(DESC, "Wait before sending val")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(DOL1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:MP3:SFANOUT.PROC PP MS")
  field(DLY2, "5")
  field(LNK2, "BL12I-AL-ATTN-02:MP3:DFANOUTA.PROC PP MS")
}

#% autosave 0 INPA INPB INPC INPD INPE INPF INPG INPH
#% gdatag,pv,ro,f3.pos,ERROR,Error Indicator,<pv>.K
record(transform, "BL12I-AL-ATTN-02:MP3:ERROR") {
  field(DESC, "Errors from positioners")
  field(FLNK, "BL12I-AL-ATTN-02:MP3:SETERROR1 PP MS")
  field(CLCI, "MAX(MAX(A,B),MAX(C,D))")
  field(CLCJ, "MAX(MAX(E,F),MAX(G,H))")
  field(CLCK, "MAX(I,J)")
  field(INPA, "0")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
}

# Check if value has changed from previous call.
# This stops infinite loops when passing MS back
# % autosave 0 VAL
record(calcout, "BL12I-AL-ATTN-02:MP3:GATE") {
  field(DESC, "Stop repeated output")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#B)||((~C)&D)")
  field(INPA, "BL12I-AL-ATTN-02:MP3:SELECT NPP MS")
  field(INPB, "BL12I-AL-ATTN-02:MP3:VALUE")
  field(OUT, "BL12I-AL-ATTN-02:MP3:VALUE PP MS")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
  field(INPC, "BL12I-AL-ATTN-02:MP3:INPOS")
  field(INPD, "BL12I-AL-ATTN-02:MP3:DMOV")
}

# Stores last selected value. This enables the gate record to check if the value has changed.
# Initially set to -1 to ensure first value is selected correctly.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:MP3:VALUE") {
  field(DESC, "Value selected")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP3:FANOUT")
  field(VAL, "-1")
}

# Add 1 to selection to allow 1st seq to work
record(calc, "BL12I-AL-ATTN-02:MP3:SELECT1") {
  field(DESC, "Selection+1")
  field(CALC, "A+1")
  field(INPA, "BL12I-AL-ATTN-02:MP3:SELECT.VAL")
}

# Sets error severities for 2nd 6 positions
record(seq, "BL12I-AL-ATTN-02:MP3:SETERROR2") {
  field(DESC, "Sets errors in SELECT")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP3:SELECT2.VAL PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP3:SELECT.EISV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP3:SELECT.NISV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP3:SELECT.TESV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP3:SELECT.ELSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP3:SELECT.TVSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP3:SELECT.TTSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP3:SELECT.FTSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP3:SELECT.FFSV PP MS")
}

# Select the correct link from the second sequence
record(calc, "BL12I-AL-ATTN-02:MP3:SELECT2") {
  field(DESC, "Selection-7")
  field(CALC, "A-7")
  field(INPA, "BL12I-AL-ATTN-02:MP3:SELECT.VAL")
}

# Sets error severities for 1st 6 positions
record(seq, "BL12I-AL-ATTN-02:MP3:SETERROR1") {
  field(DESC, "Sets errors in SELECT")
  field(FLNK, "BL12I-AL-ATTN-02:MP3:SETERROR2")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP3:SELECT1 PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP3:SELECT.ZRSV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP3:SELECT.ONSV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP3:SELECT.TWSV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP3:SELECT.THSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP3:SELECT.FRSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP3:SELECT.FVSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP3:SELECT.SXSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP3:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP3:SELECT.SVSV PP MS")
}

# Stores types of underlying positioners
# 0 = Undefined
# 1 = Normal
# 2 = Motor
#% autosave 0 A B C D E F G H
record(calcout, "BL12I-AL-ATTN-02:MP3:TYPE") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "0")
  field(B, "0")
  field(C, "0")
  field(D, "0")
  field(E, "0")
  field(F, "0")
  field(G, "0")
  field(H, "0")
  field(DESC, "Types of positioner")
}

# Record to allow EDM to process changes of strings.
record(bo, "BL12I-AL-ATTN-02:MP3:UPDATE") {
  field(DESC, "Dummy for EDM")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Updating")
  field(ONAM, "Normal")
}

# Combined in position indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
#% gdatag,pv,ro,f3.pos,INPOS,In Position Indicator
record(calcout, "BL12I-AL-ATTN-02:MP3:INPOS") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Combined in position monitor")
}

#% gdatag,pv,rw,f3.pos,STOP,Stop Button,<pv>.PROC
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP3:STOP") {
  field(DESC, "Stop all motors")
  field(VAL, "1")
  field(SELM, "All")
}

# This makes the component icon reflect the status
# % gui, , status
record(busy, "BL12I-AL-ATTN-02:MP3:BUSY") {
}

record(fanout, "BL12I-AL-ATTN-02:MP3:START") {
  field(LNK1, "BL12I-AL-ATTN-02:MP3:GATE PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP3:BUSY")
}

# Fans selected position number to each separate controller
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP3:DFANOUTA") {
  field(DESC, "Fanout selection")
  field(SELM, "All")
  field(DOL, "BL12I-AL-ATTN-02:MP3:VALUE.VAL")
  field(OMSL, "closed_loop")
}

#! Generated by VisualDCT v2.6

# % macro, __doc__, Template for controlling many positioner or
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix
# % macro, MP, Device suffix
# % macro, DESC, Multipositioner description
# % macro, STRA, String description for position 1
# % macro, STRB, String description for position 2
# % macro, STRC, String description for position 3
# % macro, STRD, String description for position 4
# % macro, STRE, String description for position 5
# % macro, STRF, String description for position 6
# % macro, STRG, String description for position 7
# % macro, STRH, String description for position 8
# % macro, STRI, String description for position 9
# % macro, STRJ, String description for position 10
# % macro, STRK, String description for position 11
# % macro, STRL, String description for position 12
# % macro, STRM, String description for position 13
# % macro, STRN, String description for position 14
# % macro, STRO, String description for position 15
# % macro, STRP, String description for position 16
# % macro, name, Object name and gui association name
# % macro, gda_name, If set, export to GDA with this name
# % macro, gda_desc, Description for GDA
# % macro, NPOS, Number of positioners, used to work out which screen to use.
# Only specify if not using the builder object.
# % macro, P1, Positioner 1 suffix for screen.
# Only specify if not using the builder object.
# % macro, P2, Positioner 2 suffix for screen.
# Only specify if not using the builder object.
# % macro, P3, Positioner 3 suffix for screen.
# Only specify if not using the builder object.
# % macro, P4, Positioner 4 suffix for screen.
# Only specify if not using the builder object.
# % macro, P5, Positioner 5 suffix for screen.
# Only specify if not using the builder object.
# % macro, P6, Positioner 6 suffix for screen.
# Only specify if not using the builder object.
# % macro, P7, Positioner 7 suffix for screen.
# Only specify if not using the builder object.
# % macro, P8, Positioner 8 suffix for screen.
# Only specify if not using the builder object.
# This associates an edm screen with the template
# % gui, , edmembed, pos-3pos.edl, P=BL12I-AL-ATTN-02,MP=:MP4,filename=motor.edl,P1=,P2=,P3=,P4=,P5=,P6=,P7=,P8=
# List of names for selection by user.
# Severity is returned via DISA.
# DISV set to 2 to stop disabling.
# % autosave 0 VAL
# % autosave 2 ZRST ONST TWST THST FRST FVST SXST SVST EIST NIST TEST ELST TVST TTST FTST FFST
# % gdatag,template,positioner,f4.pos,Cu filter stick 3
# % gdatag,mbbinary,rw,f4.pos,SELECT,Position Selection
record(mbbo, "BL12I-AL-ATTN-02:MP4:SELECT") {
  field(DESC, "Cu filter stick 3")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(ZRST, "clear")
  field(ONST, "clear")
  field(TWST, "clear")
  field(THST, "")
  field(FRST, "")
  field(FVST, "")
  field(SXST, "")
  field(FLNK, "BL12I-AL-ATTN-02:MP4:START PP MS")
  field(SVST, "")
  field(EIST, "")
  field(NIST, "")
  field(TEST, "")
  field(ELST, "")
  field(PINI, "YES")
  field(DISV, "2")
  field(VAL, "0")
  field(TVST, "")
  field(TTST, "")
  field(FTST, "")
  field(FFST, "")
}

# Open a gate on each positioner.
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP4:SFANOUT") {
  field(DESC, "Fanout start motion")
  field(SELM, "All")
  field(VAL, "0")
}

# On selection make sure all gates are open before motion
record(fanout, "BL12I-AL-ATTN-02:MP4:FANOUT") {
  field(LNK1, "BL12I-AL-ATTN-02:MP4:SFANOUT PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP4:DFANOUTA PP MS")
  field(DESC, "Fanout of processing")
}

# This PV is a good indication of severity
# % gui, , sevr
# Combined done moving indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
# % gdatag,pv,ro,f4.pos,DMOV,Done Moving Indicator
record(calcout, "BL12I-AL-ATTN-02:MP4:DMOV") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Positioner done moving")
  field(OUT, "BL12I-AL-ATTN-02:MP4:BUSY CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use OCAL")
  field(OCAL, "(A&B&C&D&E&F&G&H)?0:1")
}

# Test opening of gates by waiting between open gate and move commands
# To use this change the FLNK of VALUE to point to this.
record(seq, "BL12I-AL-ATTN-02:MP4:FANOUT2") {
  field(DESC, "Wait before sending val")
  field(SCAN, "Passive")
  field(SELM, "All")
  field(DOL1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:MP4:SFANOUT.PROC PP MS")
  field(DLY2, "5")
  field(LNK2, "BL12I-AL-ATTN-02:MP4:DFANOUTA.PROC PP MS")
}

#% autosave 0 INPA INPB INPC INPD INPE INPF INPG INPH
#% gdatag,pv,ro,f4.pos,ERROR,Error Indicator,<pv>.K
record(transform, "BL12I-AL-ATTN-02:MP4:ERROR") {
  field(DESC, "Errors from positioners")
  field(FLNK, "BL12I-AL-ATTN-02:MP4:SETERROR1 PP MS")
  field(CLCI, "MAX(MAX(A,B),MAX(C,D))")
  field(CLCJ, "MAX(MAX(E,F),MAX(G,H))")
  field(CLCK, "MAX(I,J)")
  field(INPA, "0")
  field(INPB, "0")
  field(INPC, "0")
  field(INPD, "0")
  field(INPE, "0")
  field(INPF, "0")
  field(INPG, "0")
  field(INPH, "0")
}

# Check if value has changed from previous call.
# This stops infinite loops when passing MS back
# % autosave 0 VAL
record(calcout, "BL12I-AL-ATTN-02:MP4:GATE") {
  field(DESC, "Stop repeated output")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#B)||((~C)&D)")
  field(INPA, "BL12I-AL-ATTN-02:MP4:SELECT NPP MS")
  field(INPB, "BL12I-AL-ATTN-02:MP4:VALUE")
  field(OUT, "BL12I-AL-ATTN-02:MP4:VALUE PP MS")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
  field(INPC, "BL12I-AL-ATTN-02:MP4:INPOS")
  field(INPD, "BL12I-AL-ATTN-02:MP4:DMOV")
}

# Stores last selected value. This enables the gate record to check if the value has changed.
# Initially set to -1 to ensure first value is selected correctly.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:MP4:VALUE") {
  field(DESC, "Value selected")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP4:FANOUT")
  field(VAL, "-1")
}

# Add 1 to selection to allow 1st seq to work
record(calc, "BL12I-AL-ATTN-02:MP4:SELECT1") {
  field(DESC, "Selection+1")
  field(CALC, "A+1")
  field(INPA, "BL12I-AL-ATTN-02:MP4:SELECT.VAL")
}

# Sets error severities for 2nd 6 positions
record(seq, "BL12I-AL-ATTN-02:MP4:SETERROR2") {
  field(DESC, "Sets errors in SELECT")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP4:SELECT2.VAL PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP4:SELECT.EISV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP4:SELECT.NISV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP4:SELECT.TESV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP4:SELECT.ELSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP4:SELECT.TVSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP4:SELECT.TTSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP4:SELECT.FTSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP4:SELECT.FFSV PP MS")
}

# Select the correct link from the second sequence
record(calc, "BL12I-AL-ATTN-02:MP4:SELECT2") {
  field(DESC, "Selection-7")
  field(CALC, "A-7")
  field(INPA, "BL12I-AL-ATTN-02:MP4:SELECT.VAL")
}

# Sets error severities for 1st 6 positions
record(seq, "BL12I-AL-ATTN-02:MP4:SETERROR1") {
  field(DESC, "Sets errors in SELECT")
  field(FLNK, "BL12I-AL-ATTN-02:MP4:SETERROR2")
  field(SELM, "Specified")
  field(SELL, "BL12I-AL-ATTN-02:MP4:SELECT1 PP")
  field(DOL1, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK1, "BL12I-AL-ATTN-02:MP4:SELECT.ZRSV PP MS")
  field(DOL2, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP4:SELECT.ONSV PP MS")
  field(DOL3, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK3, "BL12I-AL-ATTN-02:MP4:SELECT.TWSV PP MS")
  field(DOL4, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK4, "BL12I-AL-ATTN-02:MP4:SELECT.THSV PP MS")
  field(DOL5, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK5, "BL12I-AL-ATTN-02:MP4:SELECT.FRSV PP MS")
  field(DOL6, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK6, "BL12I-AL-ATTN-02:MP4:SELECT.FVSV PP MS")
  field(DOL7, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK7, "BL12I-AL-ATTN-02:MP4:SELECT.SXSV PP MS")
  field(DOL8, "BL12I-AL-ATTN-02:MP4:ERROR.K NPP MS")
  field(LNK8, "BL12I-AL-ATTN-02:MP4:SELECT.SVSV PP MS")
}

# Stores types of underlying positioners
# 0 = Undefined
# 1 = Normal
# 2 = Motor
#% autosave 0 A B C D E F G H
record(calcout, "BL12I-AL-ATTN-02:MP4:TYPE") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "0")
  field(B, "0")
  field(C, "0")
  field(D, "0")
  field(E, "0")
  field(F, "0")
  field(G, "0")
  field(H, "0")
  field(DESC, "Types of positioner")
}

# Record to allow EDM to process changes of strings.
record(bo, "BL12I-AL-ATTN-02:MP4:UPDATE") {
  field(DESC, "Dummy for EDM")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "1")
  field(ZNAM, "Updating")
  field(ONAM, "Normal")
}

# Combined in position indicator.
# Value from AND of all 8 possible inputs.
# The fixed values of 1 are overwritten by each positioner.
#% gdatag,pv,ro,f4.pos,INPOS,In Position Indicator
record(calcout, "BL12I-AL-ATTN-02:MP4:INPOS") {
  field(CALC, "A&B&C&D&E&F&G&H")
  field(A, "1")
  field(B, "1")
  field(C, "1")
  field(D, "1")
  field(E, "1")
  field(F, "1")
  field(G, "1")
  field(H, "1")
  field(DESC, "Combined in position monitor")
}

#% gdatag,pv,rw,f4.pos,STOP,Stop Button,<pv>.PROC
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP4:STOP") {
  field(DESC, "Stop all motors")
  field(VAL, "1")
  field(SELM, "All")
}

# This makes the component icon reflect the status
# % gui, , status
record(busy, "BL12I-AL-ATTN-02:MP4:BUSY") {
}

record(fanout, "BL12I-AL-ATTN-02:MP4:START") {
  field(LNK1, "BL12I-AL-ATTN-02:MP4:GATE PP MS")
  field(LNK2, "BL12I-AL-ATTN-02:MP4:BUSY")
}

# Fans selected position number to each separate controller
# The outlinks are filled by the positioners.
#% autosave 0 OUTA OUTB OUTC OUTD OUTE OUTF OUTG OUTH
record(dfanout, "BL12I-AL-ATTN-02:MP4:DFANOUTA") {
  field(DESC, "Fanout selection")
  field(SELM, "All")
  field(DOL, "BL12I-AL-ATTN-02:MP4:VALUE.VAL")
  field(OMSL, "closed_loop")
}






#! Generated by VisualDCT v2.6

record(stringout, "BL12I-AL-ATTN-02:P2:SETINPUT2") {
  field(DESC, "Create open gate link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SETINPUT3")
  field(VAL, "BL12I-AL-ATTN-02:P2:OPENGATE PP")
  field(OUT, "BL12I-AL-ATTN-02:MP2:SFANOUT.OUTA CA")
}

# This record stops the setting of the input after 1 cycle
# It also causes the multipositioner's fanout record to be processed.
# This pushes the current value to the motor.
record(bo, "BL12I-AL-ATTN-02:P2:SETUPDISABLE") {
  field(DESC, "Disable proc once done")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP2:FANOUT.PROC CA")
  field(VAL, "1")
  field(OUT, "BL12I-AL-ATTN-02:P2:SETINPUT1.DISA")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALA") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "1.1")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALB") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "30")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALC") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "60")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALD") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALE") {
  field(DESC, "Fifth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.E")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALF") {
  field(DESC, "Sixth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.F")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALG") {
  field(DESC, "Seventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.G")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALH") {
  field(DESC, "Eigth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.H")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALI") {
  field(DESC, "Ninth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.I")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALJ") {
  field(DESC, "Tenth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.J")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALK") {
  field(DESC, "Eleventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.K")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALL") {
  field(DESC, "Twelth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.L")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

# % autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P2:SETVALUE") {
  field(OMSL, "supervisory")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P2:SETVALUE2 PP")
  field(EGU, "mm")
}

# Takes readback and sets value field
record(ao, "BL12I-AL-ATTN-02:P2:SETA") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALA PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(bo, "BL12I-AL-ATTN-02:P2:DMOV") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP2:DMOV.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(bo, "BL12I-AL-ATTN-02:P2:INPOS") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP2:INPOS.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(dfanout, "BL12I-AL-ATTN-02:P2:OPENGATE") {
  field(DESC, "Fanout open gate command")
  field(OUTA, "BL12I-AL-ATTN-02:P2:DMOV PP")
  field(OUTB, "BL12I-AL-ATTN-02:P2:INPOS PP")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETB") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALB PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETC") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALC PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETD") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALD PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETE") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALE PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETF") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALF PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETL") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETK") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALK PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETJ") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALJ PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETG") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALG PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETH") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALH PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETI") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALI PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

record(stringout, "BL12I-AL-ATTN-02:P2:SETINPUT3") {
  field(DESC, "Create severity link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SETINPUT4")
  field(VAL, "BL12I-AL-ATTN-02:P2:UPD.SEVR CP")
  field(OUT, "BL12I-AL-ATTN-02:MP2:ERROR.INPA CA")
}

#% autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P2:SETVALUE2") {
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:POSN:B PP")
  field(EGU, "mm")
  field(FLNK, "BL12I-AL-ATTN-02:P2:UPD")
}

record(stringout, "BL12I-AL-ATTN-02:P2:SETINPUT4") {
  field(DESC, "Store Type")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SETINPUT5")
  field(VAL, "2")
  field(OUT, "BL12I-AL-ATTN-02:MP2:TYPE.A CA")
}

record(stringout, "BL12I-AL-ATTN-02:P2:DEVNAME") {
  field(DESC, "Placeholder for name")
  field(VAL, "BL12I-AL-ATTN-02:POSN:B")
}

record(transform, "BL12I-AL-ATTN-02:P2:UPD") {
  field(CLCE, "A")
  field(CLCF, "ABS(D-B)<=C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:P2:SETVALUE.VAL")
  field(INPC, "BL12I-AL-ATTN-02:POSN:B.RDBD")
  field(INPD, "BL12I-AL-ATTN-02:POSN:B.RBV CP MS")
  field(OUTE, "BL12I-AL-ATTN-02:P2:DMOV PP")
  field(OUTF, "BL12I-AL-ATTN-02:P2:INPOS PP")
  field(EGU, "mm")
  field(PREC, "2")
}

record(stringout, "BL12I-AL-ATTN-02:P2:SETINPUT5") {
  field(DESC, "Set stop link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SETUPDISABLE")
  field(VAL, "BL12I-AL-ATTN-02:P2:STOP PP")
  field(OUT, "BL12I-AL-ATTN-02:MP2:STOP.OUTA CA")
}

# Send stop to motor
record(bo, "BL12I-AL-ATTN-02:P2:STOP") {
  field(DESC, "Stop motor")
  field(OMSL, "closed_loop")
  field(DOL, "1")
  field(OUT, "BL12I-AL-ATTN-02:POSN:B.STOP PP")
}

record(sel, "BL12I-AL-ATTN-02:P2:SEL2") {
  field(DESC, "Cu filter stick 1")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SEL2COPY")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(sel, "BL12I-AL-ATTN-02:P2:SEL1") {
  field(DESC, "Cu filter stick 1")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SEL1COPY PP")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(calcout, "BL12I-AL-ATTN-02:P2:SELCALC1") {
  field(FLNK, "BL12I-AL-ATTN-02:P2:SELCALC2")
  field(CALC, "A<12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P2:SEL.VAL")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL1.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
}

record(calcout, "BL12I-AL-ATTN-02:P2:SELCALC2") {
  field(CALC, "A>=12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P2:SEL")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL2.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A-12")
}

# This record contains the list of positions for motor.
# The multipositioner writes to the VAL field to select one.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:P2:SEL") {
  field(DESC, "Cu filter stick 1")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SELCALC1")
}

record(ao, "BL12I-AL-ATTN-02:P2:SEL1COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P2:SEL1.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P2:SETVALUE PP")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P2:SEL2COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P2:SEL2.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P2:SETVALUE PP")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALM") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL2.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETM") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALM.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALN") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL2.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETN") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALN.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALO") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL2.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETO") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALO.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P2:VALP") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P2:SEL2.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P2:SETP") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P2:VALP.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:B.RBV")
  field(OMSL, "closed_loop")
}

# % macro, __doc__, Template for wrapping a motor as a positioner. This allows
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix, must match P of multipositioner
# % macro, Q, Device suffix
# % macro, MP, Multipositioner suffix, must match MP of multipositioner
# % macro, DESC, Positioner description
# % macro, EGU, Engineering units
# % macro, PREC, Precision to display to
# % macro, motor, Motor record pv
# % macro, VALA, Positioner value for position 1
# % macro, VALB, Positioner value for position 2
# % macro, VALC, Positioner value for position 3
# % macro, VALD, Positioner value for position 4
# % macro, VALE, Positioner value for position 5
# % macro, VALF, Positioner value for position 6
# % macro, VALG, Positioner value for position 7
# % macro, VALH, Positioner value for position 8
# % macro, VALI, Positioner value for position 9
# % macro, VALJ, Positioner value for position 10
# % macro, VALK, Positioner value for position 11
# % macro, VALL, Positioner value for position 12
# % macro, VALM, Positioner value for position 13
# % macro, VALN, Positioner value for position 14
# % macro, VALO, Positioner value for position 15
# % macro, VALP, Positioner value for position 16
# % macro, pos, Positioner letter (A..H)
# This record sets the first input link from the multipositioner.
# This decouples the two templates.
# The output can only be set after initialisation. Hence this runs on a scan.
# After running once it is disabled.
record(stringout, "BL12I-AL-ATTN-02:P2:SETINPUT1") {
  field(DESC, "Set output link from above")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P2:SETINPUT2")
  field(VAL, "BL12I-AL-ATTN-02:P2:SEL PP")
  field(OUT, "BL12I-AL-ATTN-02:MP2:DFANOUTA.OUTA CA")
  field(SCAN, "1 second")
}

#! Generated by VisualDCT v2.6

record(stringout, "BL12I-AL-ATTN-02:P3:SETINPUT2") {
  field(DESC, "Create open gate link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SETINPUT3")
  field(VAL, "BL12I-AL-ATTN-02:P3:OPENGATE PP")
  field(OUT, "BL12I-AL-ATTN-02:MP3:SFANOUT.OUTA CA")
}

# This record stops the setting of the input after 1 cycle
# It also causes the multipositioner's fanout record to be processed.
# This pushes the current value to the motor.
record(bo, "BL12I-AL-ATTN-02:P3:SETUPDISABLE") {
  field(DESC, "Disable proc once done")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP3:FANOUT.PROC CA")
  field(VAL, "1")
  field(OUT, "BL12I-AL-ATTN-02:P3:SETINPUT1.DISA")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALA") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "1.1")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALB") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "30")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALC") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "60")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALD") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALE") {
  field(DESC, "Fifth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.E")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALF") {
  field(DESC, "Sixth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.F")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALG") {
  field(DESC, "Seventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.G")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALH") {
  field(DESC, "Eigth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.H")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALI") {
  field(DESC, "Ninth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.I")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALJ") {
  field(DESC, "Tenth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.J")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALK") {
  field(DESC, "Eleventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.K")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALL") {
  field(DESC, "Twelth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.L")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

# % autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P3:SETVALUE") {
  field(OMSL, "supervisory")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P3:SETVALUE2 PP")
  field(EGU, "mm")
}

# Takes readback and sets value field
record(ao, "BL12I-AL-ATTN-02:P3:SETA") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALA PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(bo, "BL12I-AL-ATTN-02:P3:DMOV") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP3:DMOV.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(bo, "BL12I-AL-ATTN-02:P3:INPOS") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP3:INPOS.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(dfanout, "BL12I-AL-ATTN-02:P3:OPENGATE") {
  field(DESC, "Fanout open gate command")
  field(OUTA, "BL12I-AL-ATTN-02:P3:DMOV PP")
  field(OUTB, "BL12I-AL-ATTN-02:P3:INPOS PP")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETB") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALB PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETC") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALC PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETD") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALD PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETE") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALE PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETF") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALF PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETL") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETK") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALK PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETJ") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALJ PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETG") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALG PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETH") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALH PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETI") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALI PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

record(stringout, "BL12I-AL-ATTN-02:P3:SETINPUT3") {
  field(DESC, "Create severity link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SETINPUT4")
  field(VAL, "BL12I-AL-ATTN-02:P3:UPD.SEVR CP")
  field(OUT, "BL12I-AL-ATTN-02:MP3:ERROR.INPA CA")
}

#% autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P3:SETVALUE2") {
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:POSN:C PP")
  field(EGU, "mm")
  field(FLNK, "BL12I-AL-ATTN-02:P3:UPD")
}

record(stringout, "BL12I-AL-ATTN-02:P3:SETINPUT4") {
  field(DESC, "Store Type")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SETINPUT5")
  field(VAL, "2")
  field(OUT, "BL12I-AL-ATTN-02:MP3:TYPE.A CA")
}

record(stringout, "BL12I-AL-ATTN-02:P3:DEVNAME") {
  field(DESC, "Placeholder for name")
  field(VAL, "BL12I-AL-ATTN-02:POSN:C")
}

record(transform, "BL12I-AL-ATTN-02:P3:UPD") {
  field(CLCE, "A")
  field(CLCF, "ABS(D-B)<=C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:P3:SETVALUE.VAL")
  field(INPC, "BL12I-AL-ATTN-02:POSN:C.RDBD")
  field(INPD, "BL12I-AL-ATTN-02:POSN:C.RBV CP MS")
  field(OUTE, "BL12I-AL-ATTN-02:P3:DMOV PP")
  field(OUTF, "BL12I-AL-ATTN-02:P3:INPOS PP")
  field(EGU, "mm")
  field(PREC, "2")
}

record(stringout, "BL12I-AL-ATTN-02:P3:SETINPUT5") {
  field(DESC, "Set stop link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SETUPDISABLE")
  field(VAL, "BL12I-AL-ATTN-02:P3:STOP PP")
  field(OUT, "BL12I-AL-ATTN-02:MP3:STOP.OUTA CA")
}

# Send stop to motor
record(bo, "BL12I-AL-ATTN-02:P3:STOP") {
  field(DESC, "Stop motor")
  field(OMSL, "closed_loop")
  field(DOL, "1")
  field(OUT, "BL12I-AL-ATTN-02:POSN:C.STOP PP")
}

record(sel, "BL12I-AL-ATTN-02:P3:SEL2") {
  field(DESC, "Cu filter stick 2")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SEL2COPY")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(sel, "BL12I-AL-ATTN-02:P3:SEL1") {
  field(DESC, "Cu filter stick 2")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SEL1COPY PP")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(calcout, "BL12I-AL-ATTN-02:P3:SELCALC1") {
  field(FLNK, "BL12I-AL-ATTN-02:P3:SELCALC2")
  field(CALC, "A<12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P3:SEL.VAL")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL1.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
}

record(calcout, "BL12I-AL-ATTN-02:P3:SELCALC2") {
  field(CALC, "A>=12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P3:SEL")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL2.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A-12")
}

# This record contains the list of positions for motor.
# The multipositioner writes to the VAL field to select one.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:P3:SEL") {
  field(DESC, "Cu filter stick 2")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SELCALC1")
}

record(ao, "BL12I-AL-ATTN-02:P3:SEL1COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P3:SEL1.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P3:SETVALUE PP")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P3:SEL2COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P3:SEL2.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P3:SETVALUE PP")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALM") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL2.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETM") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALM.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALN") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL2.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETN") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALN.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALO") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL2.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETO") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALO.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P3:VALP") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P3:SEL2.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P3:SETP") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P3:VALP.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:C.RBV")
  field(OMSL, "closed_loop")
}

# % macro, __doc__, Template for wrapping a motor as a positioner. This allows
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix, must match P of multipositioner
# % macro, Q, Device suffix
# % macro, MP, Multipositioner suffix, must match MP of multipositioner
# % macro, DESC, Positioner description
# % macro, EGU, Engineering units
# % macro, PREC, Precision to display to
# % macro, motor, Motor record pv
# % macro, VALA, Positioner value for position 1
# % macro, VALB, Positioner value for position 2
# % macro, VALC, Positioner value for position 3
# % macro, VALD, Positioner value for position 4
# % macro, VALE, Positioner value for position 5
# % macro, VALF, Positioner value for position 6
# % macro, VALG, Positioner value for position 7
# % macro, VALH, Positioner value for position 8
# % macro, VALI, Positioner value for position 9
# % macro, VALJ, Positioner value for position 10
# % macro, VALK, Positioner value for position 11
# % macro, VALL, Positioner value for position 12
# % macro, VALM, Positioner value for position 13
# % macro, VALN, Positioner value for position 14
# % macro, VALO, Positioner value for position 15
# % macro, VALP, Positioner value for position 16
# % macro, pos, Positioner letter (A..H)
# This record sets the first input link from the multipositioner.
# This decouples the two templates.
# The output can only be set after initialisation. Hence this runs on a scan.
# After running once it is disabled.
record(stringout, "BL12I-AL-ATTN-02:P3:SETINPUT1") {
  field(DESC, "Set output link from above")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P3:SETINPUT2")
  field(VAL, "BL12I-AL-ATTN-02:P3:SEL PP")
  field(OUT, "BL12I-AL-ATTN-02:MP3:DFANOUTA.OUTA CA")
  field(SCAN, "1 second")
}

#! Generated by VisualDCT v2.6

record(stringout, "BL12I-AL-ATTN-02:P4:SETINPUT2") {
  field(DESC, "Create open gate link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SETINPUT3")
  field(VAL, "BL12I-AL-ATTN-02:P4:OPENGATE PP")
  field(OUT, "BL12I-AL-ATTN-02:MP4:SFANOUT.OUTA CA")
}

# This record stops the setting of the input after 1 cycle
# It also causes the multipositioner's fanout record to be processed.
# This pushes the current value to the motor.
record(bo, "BL12I-AL-ATTN-02:P4:SETUPDISABLE") {
  field(DESC, "Disable proc once done")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:MP4:FANOUT.PROC CA")
  field(VAL, "1")
  field(OUT, "BL12I-AL-ATTN-02:P4:SETINPUT1.DISA")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALA") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALB") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "30")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALC") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "60")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALD") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALE") {
  field(DESC, "Fifth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.E")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALF") {
  field(DESC, "Sixth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.F")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALG") {
  field(DESC, "Seventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.G")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALH") {
  field(DESC, "Eigth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.H")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALI") {
  field(DESC, "Ninth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.I")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALJ") {
  field(DESC, "Tenth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.J")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALK") {
  field(DESC, "Eleventh position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.K")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALL") {
  field(DESC, "Twelth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.L")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

# % autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P4:SETVALUE") {
  field(OMSL, "supervisory")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P4:SETVALUE2 PP")
  field(EGU, "mm")
}

# Takes readback and sets value field
record(ao, "BL12I-AL-ATTN-02:P4:SETA") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALA PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(bo, "BL12I-AL-ATTN-02:P4:DMOV") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP4:DMOV.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(bo, "BL12I-AL-ATTN-02:P4:INPOS") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:MP4:INPOS.A PP")
  field(ZNAM, "Opened")
  field(ONAM, "Closed")
}

record(dfanout, "BL12I-AL-ATTN-02:P4:OPENGATE") {
  field(DESC, "Fanout open gate command")
  field(OUTA, "BL12I-AL-ATTN-02:P4:DMOV PP")
  field(OUTB, "BL12I-AL-ATTN-02:P4:INPOS PP")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETB") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALB PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETC") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALC PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETD") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALD PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETE") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALE PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETF") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALF PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETL") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETK") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALK PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETJ") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALJ PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETG") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALG PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETH") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALH PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETI") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALI PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

record(stringout, "BL12I-AL-ATTN-02:P4:SETINPUT3") {
  field(DESC, "Create severity link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SETINPUT4")
  field(VAL, "BL12I-AL-ATTN-02:P4:UPD.SEVR CP")
  field(OUT, "BL12I-AL-ATTN-02:MP4:ERROR.INPA CA")
}

#% autosave 0 VAL
record(ao, "BL12I-AL-ATTN-02:P4:SETVALUE2") {
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:POSN:D PP")
  field(EGU, "mm")
  field(FLNK, "BL12I-AL-ATTN-02:P4:UPD")
}

record(stringout, "BL12I-AL-ATTN-02:P4:SETINPUT4") {
  field(DESC, "Store Type")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SETINPUT5")
  field(VAL, "2")
  field(OUT, "BL12I-AL-ATTN-02:MP4:TYPE.A CA")
}

record(stringout, "BL12I-AL-ATTN-02:P4:DEVNAME") {
  field(DESC, "Placeholder for name")
  field(VAL, "BL12I-AL-ATTN-02:POSN:D")
}

record(transform, "BL12I-AL-ATTN-02:P4:UPD") {
  field(CLCE, "A")
  field(CLCF, "ABS(D-B)<=C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:P4:SETVALUE.VAL")
  field(INPC, "BL12I-AL-ATTN-02:POSN:D.RDBD")
  field(INPD, "BL12I-AL-ATTN-02:POSN:D.RBV CP MS")
  field(OUTE, "BL12I-AL-ATTN-02:P4:DMOV PP")
  field(OUTF, "BL12I-AL-ATTN-02:P4:INPOS PP")
  field(EGU, "mm")
  field(PREC, "2")
}

record(stringout, "BL12I-AL-ATTN-02:P4:SETINPUT5") {
  field(DESC, "Set stop link")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SETUPDISABLE")
  field(VAL, "BL12I-AL-ATTN-02:P4:STOP PP")
  field(OUT, "BL12I-AL-ATTN-02:MP4:STOP.OUTA CA")
}

# Send stop to motor
record(bo, "BL12I-AL-ATTN-02:P4:STOP") {
  field(DESC, "Stop motor")
  field(OMSL, "closed_loop")
  field(DOL, "1")
  field(OUT, "BL12I-AL-ATTN-02:POSN:D.STOP PP")
}

record(sel, "BL12I-AL-ATTN-02:P4:SEL2") {
  field(DESC, "Cu filter stick 3")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SEL2COPY")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(sel, "BL12I-AL-ATTN-02:P4:SEL1") {
  field(DESC, "Cu filter stick 3")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SEL1COPY PP")
  field(SELM, "Specified")
  field(PREC, "2")
  field(EGU, "mm")
}

record(calcout, "BL12I-AL-ATTN-02:P4:SELCALC1") {
  field(FLNK, "BL12I-AL-ATTN-02:P4:SELCALC2")
  field(CALC, "A<12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P4:SEL.VAL")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL1.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A")
}

record(calcout, "BL12I-AL-ATTN-02:P4:SELCALC2") {
  field(CALC, "A>=12?1:0")
  field(INPA, "BL12I-AL-ATTN-02:P4:SEL")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL2.SELN PP")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "A-12")
}

# This record contains the list of positions for motor.
# The multipositioner writes to the VAL field to select one.
#% autosave 0 VAL
record(longout, "BL12I-AL-ATTN-02:P4:SEL") {
  field(DESC, "Cu filter stick 3")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SELCALC1")
}

record(ao, "BL12I-AL-ATTN-02:P4:SEL1COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P4:SEL1.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P4:SETVALUE PP")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P4:SEL2COPY") {
  field(DOL, "BL12I-AL-ATTN-02:P4:SEL2.VAL")
  field(OMSL, "closed_loop")
  field(PREC, "2")
  field(OUT, "BL12I-AL-ATTN-02:P4:SETVALUE PP")
  field(EGU, "mm")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALM") {
  field(DESC, "First position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL2.A")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETM") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALM.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALN") {
  field(DESC, "Second position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL2.B")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETN") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALN.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALO") {
  field(DESC, "Third position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL2.C")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETO") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALO.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

#% autosave 2 VAL
record(ao, "BL12I-AL-ATTN-02:P4:VALP") {
  field(DESC, "Fourth position")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-AL-ATTN-02:P4:SEL2.D")
  field(PINI, "YES")
  field(PREC, "2")
  field(EGU, "mm")
}

record(ao, "BL12I-AL-ATTN-02:P4:SETP") {
  field(DESC, "Set VALA")
  field(OUT, "BL12I-AL-ATTN-02:P4:VALP.VAL PP")
  field(DOL, "BL12I-AL-ATTN-02:POSN:D.RBV")
  field(OMSL, "closed_loop")
}

# % macro, __doc__, Template for wrapping a motor as a positioner. This allows
# it to be controlled by a multipositioner, mapping a list of names onto a
# list of motor positions
# % macro, P, Device prefix, must match P of multipositioner
# % macro, Q, Device suffix
# % macro, MP, Multipositioner suffix, must match MP of multipositioner
# % macro, DESC, Positioner description
# % macro, EGU, Engineering units
# % macro, PREC, Precision to display to
# % macro, motor, Motor record pv
# % macro, VALA, Positioner value for position 1
# % macro, VALB, Positioner value for position 2
# % macro, VALC, Positioner value for position 3
# % macro, VALD, Positioner value for position 4
# % macro, VALE, Positioner value for position 5
# % macro, VALF, Positioner value for position 6
# % macro, VALG, Positioner value for position 7
# % macro, VALH, Positioner value for position 8
# % macro, VALI, Positioner value for position 9
# % macro, VALJ, Positioner value for position 10
# % macro, VALK, Positioner value for position 11
# % macro, VALL, Positioner value for position 12
# % macro, VALM, Positioner value for position 13
# % macro, VALN, Positioner value for position 14
# % macro, VALO, Positioner value for position 15
# % macro, VALP, Positioner value for position 16
# % macro, pos, Positioner letter (A..H)
# This record sets the first input link from the multipositioner.
# This decouples the two templates.
# The output can only be set after initialisation. Hence this runs on a scan.
# After running once it is disabled.
record(stringout, "BL12I-AL-ATTN-02:P4:SETINPUT1") {
  field(DESC, "Set output link from above")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:P4:SETINPUT2")
  field(VAL, "BL12I-AL-ATTN-02:P4:SEL PP")
  field(OUT, "BL12I-AL-ATTN-02:MP4:DFANOUTA.OUTA CA")
  field(SCAN, "1 second")
}






#! Generated by VisualDCT v2.6

# # \file
# # This template allows setting of variables for a set of blade slits, 
# # made up two pairs of blades, one each for X and Y. A separate instance of 
# # this CS is needed for X and Y. It needs PROG10_CS_motion.pmc and each 
# # instance requires an instantiation of CS_blade_slits.pmc with the variables 
# # shown in the image below:
# # \image html blade_slits-help.png "Setup of blade slits in X or Y"
# # Build instructions for an example IOC are available 
# # \ref build_instructions_bladeSlits "here", with a pmc file containing 
# # the CS definition available in iocs/bladeSlits/defs.pmc
# % macro, __doc__, Supporting template that allows setting of variables for a 
# set of blade slits
# % macro, P, Pv Prefix
# % macro, BPPV, Pv of real BP motor, e.g. BL12I-AL-SLITS-02:X:PLUS
# % macro, BMPV, Pv of real BM motor, e.g. BL12I-AL-SLITS-02:X:MINUS
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, s2, edm, blade_slits.edl, slits=BL12I-AL-SLITS-02
# # This record will zero raw motors when processed
record(fanout, "BL12I-AL-SLITS-02:ZERO") {
  field(LNK1, "BL12I-AL-SLITS-02:ZEROBP")
  field(LNK2, "BL12I-AL-SLITS-02:ZEROBM")
}

record(calcout, "BL12I-AL-SLITS-02:ZEROBP") {
  field(CALC, "-A")
  field(INPA, ":X:PLUS.DRBV")
  field(OUT, ":X:PLUS.OFF PP")
}

record(calcout, "BL12I-AL-SLITS-02:ZEROBM") {
  field(CALC, "-A")
  field(INPA, ":X:MINUS.DRBV")
  field(OUT, ":X:MINUS.OFF PP")
}

#! Generated by VisualDCT v2.6

# # \file
# # This template allows setting of variables for a set of blade slits, 
# # made up two pairs of blades, one each for X and Y. A separate instance of 
# # this CS is needed for X and Y. It needs PROG10_CS_motion.pmc and each 
# # instance requires an instantiation of CS_blade_slits.pmc with the variables 
# # shown in the image below:
# # \image html blade_slits-help.png "Setup of blade slits in X or Y"
# # Build instructions for an example IOC are available 
# # \ref build_instructions_bladeSlits "here", with a pmc file containing 
# # the CS definition available in iocs/bladeSlits/defs.pmc
# % macro, __doc__, Supporting template that allows setting of variables for a 
# set of blade slits
# % macro, P, Pv Prefix
# % macro, BPPV, Pv of real BP motor, e.g. BL12I-AL-SLITS-02:X:PLUS
# % macro, BMPV, Pv of real BM motor, e.g. BL12I-AL-SLITS-02:X:MINUS
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, s2, edm, blade_slits.edl, slits=BL12I-AL-SLITS-02
# # This record will zero raw motors when processed
record(fanout, "BL12I-AL-SLITS-02:ZERO") {
  field(LNK1, "BL12I-AL-SLITS-02:ZEROBP")
  field(LNK2, "BL12I-AL-SLITS-02:ZEROBM")
}

record(calcout, "BL12I-AL-SLITS-02:ZEROBP") {
  field(CALC, "-A")
  field(INPA, ":Y:PLUS.DRBV")
  field(OUT, ":Y:PLUS.OFF PP")
}

record(calcout, "BL12I-AL-SLITS-02:ZEROBM") {
  field(CALC, "-A")
  field(INPA, ":Y:MINUS.DRBV")
  field(OUT, ":Y:MINUS.OFF PP")
}






#! Generated by VisualDCT v2.6

# % macro, __doc__, Template wrapping a scan record with some menus that store 
# previous values of detectors, triggers, etc.
# % macro, P, Device prefix
# % macro, S, Device suffix
# % macro, MPTS, Maximum number of points in a scan
# % macro, P1, Positioner 1 default pv
# % macro, P2, Positioner 2 default pv
# % macro, P3, Positioner 3 default pv
# % macro, P4, Positioner 4 default pv
# % macro, T1, Trigger 1 default pv
# % macro, T2, Trigger 2 default pv
# % macro, T3, Trigger 3 default pv
# % macro, T4, Trigger 4 default pv
# % macro, D01, Detector 1 default pv
# % macro, D02, Detector 2 default pv
# % macro, D03, Detector 3 default pv
# % macro, D04, Detector 4 default pv
# % macro, D05, Detector 5 default pv
# % macro, D06, Detector 6 default pv
# % macro, D07, Detector 7 default pv
# % macro, D08, Detector 8 default pv
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, $(name,undefined), edm, generic-scan.edl, P=BL12I-MO-IOC-03
record(sscan, "BL12I-MO-IOC-03:SCAN") {
  field(PINI, "YES")
  field(MPTS, "1000")
  field(NPTS, "10")
}

record(mbbo, "BL12I-MO-IOC-03:SCAN:DET") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-MO-IOC-03:SCAN.REFD")
  field(ZRVL, "1")
  field(ONVL, "2")
  field(TWVL, "3")
  field(THVL, "4")
  field(ZRST, "D01")
  field(ONST, "D02")
  field(TWST, "D03")
  field(THST, "D04")
  field(FRVL, "5")
  field(FVVL, "6")
  field(SXVL, "7")
  field(SVVL, "8")
  field(FRST, "D05")
  field(FVST, "D06")
  field(SXST, "D07")
  field(SVST, "D08")
}

#% autosave 2 VAL
record(waveform, "BL12I-MO-IOC-03:SCAN:FILE") {
  field(NELM, "1000")
  field(FTVL, "UCHAR")
  field(PINI, "YES")
}

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD01") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD01.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD01") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD01.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD01.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD01.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD01.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD01.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD01.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD01.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD01.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD01.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD01.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD01.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD01.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD01.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD01.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD01.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD01.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD01.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD01") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD01.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD01") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD01.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD01") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND01.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD01.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD01")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND01") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD01.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD01.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD01 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD01.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D01PV")
}

# end(generic-9menu)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu2)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUP1") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRP1.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPP1") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUP1.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUP1.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUP1.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUP1.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUP1.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUP1.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUP1.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUP1.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUP1.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUP1.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUP1.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUP1.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUP1.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUP1.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUP1.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUP1.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUP1.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRP1") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKP1.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELP1") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUP1.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKP1") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANP1.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRP1.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRP1")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANP1") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPP1.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKP1.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP1 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKP1.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.P1PV")
}

# end(generic-9menu2)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu3)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUT1") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRT1.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPT1") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUT1.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUT1.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUT1.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUT1.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUT1.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUT1.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUT1.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUT1.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUT1.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUT1.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUT1.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUT1.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUT1.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUT1.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUT1.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUT1.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUT1.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRT1") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKT1.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELT1") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUT1.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKT1") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANT1.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRT1.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRT1")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANT1") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPT1.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKT1.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT1 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKT1.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.T1PV")
}

# end(generic-9menu3)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu4)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD02") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD02.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD02") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD02.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD02.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD02.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD02.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD02.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD02.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD02.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD02.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD02.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD02.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD02.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD02.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD02.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD02.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD02.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD02.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD02.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD02") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD02.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD02") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD02.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD02") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND02.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD02.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD02")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND02") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD02.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD02.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD02 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD02.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D02PV")
}

# end(generic-9menu4)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu5)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUP2") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRP2.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPP2") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUP2.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUP2.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUP2.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUP2.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUP2.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUP2.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUP2.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUP2.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUP2.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUP2.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUP2.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUP2.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUP2.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUP2.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUP2.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUP2.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUP2.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRP2") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKP2.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELP2") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUP2.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKP2") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANP2.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRP2.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRP2")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANP2") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPP2.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKP2.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP2 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKP2.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.P2PV")
}

# end(generic-9menu5)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu6)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUT2") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRT2.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPT2") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUT2.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUT2.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUT2.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUT2.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUT2.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUT2.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUT2.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUT2.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUT2.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUT2.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUT2.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUT2.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUT2.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUT2.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUT2.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUT2.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUT2.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRT2") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKT2.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELT2") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUT2.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKT2") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANT2.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRT2.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRT2")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANT2") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPT2.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKT2.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT2 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKT2.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.T2PV")
}

# end(generic-9menu6)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu7)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD03") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD03.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD03") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD03.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD03.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD03.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD03.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD03.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD03.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD03.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD03.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD03.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD03.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD03.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD03.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD03.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD03.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD03.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD03.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD03.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD03") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD03.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD03") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD03.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD03") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND03.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD03.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD03")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND03") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD03.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD03.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD03 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD03.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D03PV")
}

# end(generic-9menu7)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu8)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUP3") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRP3.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPP3") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUP3.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUP3.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUP3.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUP3.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUP3.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUP3.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUP3.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUP3.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUP3.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUP3.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUP3.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUP3.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUP3.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUP3.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUP3.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUP3.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUP3.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRP3") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKP3.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELP3") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUP3.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKP3") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANP3.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRP3.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRP3")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANP3") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPP3.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKP3.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP3 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKP3.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.P3PV")
}

# end(generic-9menu8)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu9)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUT3") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRT3.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPT3") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUT3.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUT3.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUT3.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUT3.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUT3.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUT3.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUT3.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUT3.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUT3.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUT3.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUT3.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUT3.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUT3.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUT3.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUT3.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUT3.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUT3.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRT3") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKT3.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELT3") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUT3.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKT3") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANT3.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRT3.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRT3")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANT3") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPT3.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKT3.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT3 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKT3.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.T3PV")
}

# end(generic-9menu9)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu10)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD04") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD04.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD04") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD04.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD04.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD04.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD04.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD04.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD04.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD04.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD04.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD04.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD04.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD04.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD04.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD04.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD04.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD04.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD04.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD04.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD04") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD04.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD04") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD04.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD04") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND04.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD04.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD04")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND04") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD04.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD04.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD04 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD04.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D04PV")
}

# end(generic-9menu10)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu11)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUP4") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRP4.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPP4") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUP4.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUP4.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUP4.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUP4.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUP4.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUP4.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUP4.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUP4.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUP4.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUP4.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUP4.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUP4.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUP4.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUP4.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUP4.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUP4.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUP4.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRP4") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKP4.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELP4") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUP4.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKP4") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANP4.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRP4.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRP4")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANP4") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPP4.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKP4.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRP4 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKP4.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.P4PV")
}

# end(generic-9menu11)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu12)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUT4") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRT4.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPT4") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUT4.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUT4.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUT4.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUT4.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUT4.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUT4.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUT4.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUT4.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUT4.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUT4.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUT4.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUT4.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUT4.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUT4.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUT4.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUT4.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUT4.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRT4") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKT4.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELT4") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUT4.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKT4") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FANT4.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRT4.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRT4")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FANT4") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPT4.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKT4.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRT4 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKT4.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.T4PV")
}

# end(generic-9menu12)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu13)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD05") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD05.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD05") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD05.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD05.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD05.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD05.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD05.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD05.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD05.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD05.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD05.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD05.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD05.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD05.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD05.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD05.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD05.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD05.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD05.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD05") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD05.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD05") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD05.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD05") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND05.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD05.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD05")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND05") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD05.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD05.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD05 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD05.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D05PV")
}

# end(generic-9menu13)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu14)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD06") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD06.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD06") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD06.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD06.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD06.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD06.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD06.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD06.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD06.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD06.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD06.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD06.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD06.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD06.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD06.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD06.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD06.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD06.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD06.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD06") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD06.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD06") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD06.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD06") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND06.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD06.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD06")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND06") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD06.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD06.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD06 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD06.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D06PV")
}

# end(generic-9menu14)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu15)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD07") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD07.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD07") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD07.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD07.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD07.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD07.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD07.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD07.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD07.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD07.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD07.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD07.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD07.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD07.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD07.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD07.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD07.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD07.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD07.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD07") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD07.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD07") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD07.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD07") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND07.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD07.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD07")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND07") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD07.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD07.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD07 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD07.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D07PV")
}

# end(generic-9menu15)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu16)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN:MENUD08") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:STRD08.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:UPD08") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN:MENUD08.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN:MENUD08.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN:MENUD08.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN:MENUD08.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN:MENUD08.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN:MENUD08.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN:MENUD08.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN:MENUD08.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:MENUD08.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:MENUD08.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:MENUD08.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN:MENUD08.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN:MENUD08.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN:MENUD08.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN:MENUD08.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN:MENUD08.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN:MENUD08.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN:STRD08") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN:CHKD08.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN:SELD08") {
  field(OUT, "BL12I-MO-IOC-03:SCAN:MENUD08.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN:CHKD08") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN:FAND08.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN:STRD08.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN:STRD08")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN:FAND08") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN:UPD08.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN:CHKD08.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN:STRD08 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN:CHKD08.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN.D08PV")
}

# end(generic-9menu16)






#! Generated by VisualDCT v2.6

# % macro, __doc__, Template wrapping 2 scan records with some menus that 
# store previous values of detectors, triggers, etc. and setting them up to 
# form a 2d scan
# % macro, P, Device prefix
# % macro, S, Device suffix
# % macro, MPTS, Maximum number of points in a scan
# % macro, P1, Positioner 1 default pv (Outer trace)
# % macro, P2, Positioner 2 default pv (Inner trace)
# % macro, T1, Trigger 1 default pv
# % macro, T2, Trigger 2 default pv
# % macro, T3, Trigger 3 default pv
# % macro, T4, Trigger 4 default pv
# % macro, D01, Detector 1 default pv
# % macro, D02, Detector 2 default pv
# % macro, D03, Detector 3 default pv
# % macro, D04, Detector 4 default pv
# % macro, D05, Detector 5 default pv
# % macro, D06, Detector 6 default pv
# % macro, D07, Detector 7 default pv
# % macro, D08, Detector 8 default pv
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, $(name,undefined), edm, generic-2d-scan.edl, P=BL12I-MO-IOC-03
record(sscan, "BL12I-MO-IOC-03:SCAN2D:2") {
  field(PINI, "YES")
  field(MPTS, "1000")
  field(T1PV, "BL12I-MO-IOC-03:SCAN2D.EXSC")
  field(DESC, "Outer Trace")
  field(NPTS, "10")
}

record(sscan, "BL12I-MO-IOC-03:SCAN2D") {
  field(PINI, "YES")
  field(MPTS, "1000")
  field(AAWAIT, "YES")
  field(DESC, "Inner Trace")
  field(NPTS, "10")
}

#% autosave 2 VAL
record(waveform, "BL12I-MO-IOC-03:SCAN2D:FILE") {
  field(NELM, "1000")
  field(FTVL, "UCHAR")
  field(PINI, "YES")
}

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD01") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD01") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD01.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD01") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD01.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD01") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD01.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD01") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND01.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD01.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD01")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND01") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD01.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD01.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD01 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD01.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D01PV")
}

# end(generic-9menu)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu2)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:2:UPP1") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:2:STRP1") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:2:CHKP1.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:2:SELP1") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:2:MENUP1.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:2:CHKP1") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:2:FANP1.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:2:STRP1.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:2:STRP1")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:2:FANP1") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:2:UPP1.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:2:CHKP1.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:2:STRP1 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:2:CHKP1.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:2.P1PV")
}

# end(generic-9menu2)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu3)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUT1") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPT1") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUT1.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRT1") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKT1.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELT1") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUT1.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKT1") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FANT1.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRT1.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRT1")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FANT1") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPT1.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKT1.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT1 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKT1.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.T1PV")
}

# end(generic-9menu3)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu4)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD02") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD02") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD02.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD02") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD02.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD02") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD02.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD02") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND02.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD02.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD02")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND02") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD02.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD02.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD02 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD02.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D02PV")
}

# end(generic-9menu4)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu5)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUP1") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPP1") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUP1.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRP1") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKP1.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELP1") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUP1.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKP1") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FANP1.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRP1.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRP1")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FANP1") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPP1.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKP1.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRP1 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKP1.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.P1PV")
}

# end(generic-9menu5)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu6)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUT2") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPT2") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUT2.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRT2") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKT2.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELT2") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUT2.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKT2") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FANT2.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRT2.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRT2")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FANT2") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPT2.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKT2.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT2 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKT2.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.T2PV")
}

# end(generic-9menu6)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu7)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD03") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD03") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD03.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD03") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD03.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD03") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD03.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD03") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND03.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD03.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD03")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND03") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD03.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD03.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD03 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD03.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D03PV")
}

# end(generic-9menu7)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu9)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUT3") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPT3") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUT3.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRT3") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKT3.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELT3") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUT3.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKT3") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FANT3.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRT3.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRT3")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FANT3") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPT3.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKT3.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT3 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKT3.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.T3PV")
}

# end(generic-9menu9)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu10)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD04") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD04") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD04.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD04") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD04.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD04") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD04.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD04") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND04.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD04.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD04")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND04") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD04.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD04.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD04 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD04.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D04PV")
}

# end(generic-9menu10)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu12)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUT4") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPT4") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUT4.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRT4") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKT4.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELT4") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUT4.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKT4") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FANT4.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRT4.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRT4")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FANT4") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPT4.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKT4.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRT4 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKT4.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.T4PV")
}

# end(generic-9menu12)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu13)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD05") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD05") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD05.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD05") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD05.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD05") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD05.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD05") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND05.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD05.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD05")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND05") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD05.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD05.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD05 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD05.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D05PV")
}

# end(generic-9menu13)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu14)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD06") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD06") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD06.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD06") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD06.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD06") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD06.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD06") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND06.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD06.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD06")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND06") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD06.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD06.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD06 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD06.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D06PV")
}

# end(generic-9menu14)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu15)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD07") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD07") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD07.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD07") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD07.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD07") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD07.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD07") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND07.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD07.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD07")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND07") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD07.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD07.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD07 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD07.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D07PV")
}

# end(generic-9menu15)

# expand("/dls_sw/prod/R3.14.11/support/generic/2-20/genericApp/Db/O.linux-x86/../generic-9menu.vdb", generic-9menu16)

#% autosave 0 STR1 STR2 STR3 STR4 STR5 STR6 STR7 STR8 STR9
record(sseq, "BL12I-MO-IOC-03:SCAN2D:MENUD08") {
  field(SELM, "Specified")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL PP")
  field(STR1, "''")
  field(STR2, "''")
  field(STR3, "''")
  field(STR4, "''")
  field(STR5, "''")
  field(STR6, "''")
  field(STR7, "''")
  field(STR8, "''")
  field(STR9, "''")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:UPD08") {
  field(DOL6, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR3")
  field(LNK6, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR4")
  field(DOL7, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR2")
  field(LNK7, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR3")
  field(LNK8, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR2")
  field(DOL8, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR1")
  field(DOL1, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR8")
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR9")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR7")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR8")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR6")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR7")
  field(DOL4, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR5")
  field(LNK4, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR6")
  field(DOL5, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR4")
  field(LNK5, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR5")
  field(LNK9, "BL12I-MO-IOC-03:SCAN2D:MENUD08.STR1")
}

record(stringout, "BL12I-MO-IOC-03:SCAN2D:STRD08") {
  field(PINI, "YES")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:CHKD08.AA PP")
  field(VAL, "")
}

record(ao, "BL12I-MO-IOC-03:SCAN2D:SELD08") {
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:MENUD08.SELN PP")
}

record(scalcout, "BL12I-MO-IOC-03:SCAN2D:CHKD08") {
  field(CALC, "(AA!=BB)&&(AA!=CC)?AA")
  field(OUT, "BL12I-MO-IOC-03:SCAN2D:FAND08.STR1 PP")
  field(BB, "BL12I-MO-IOC-03:SCAN2D:STRD08.VAL")
  field(CC, "BL12I-MO-IOC-03:SCAN2D:STRD08")
  field(OOPT, "Every Time")
}

record(sseq, "BL12I-MO-IOC-03:SCAN2D:FAND08") {
  field(LNK1, "BL12I-MO-IOC-03:SCAN2D:UPD08.STR9 PP")
  field(DOL2, "BL12I-MO-IOC-03:SCAN2D:CHKD08.SVAL")
  field(LNK2, "BL12I-MO-IOC-03:SCAN2D:STRD08 PP")
  field(DOL3, "BL12I-MO-IOC-03:SCAN2D:CHKD08.SVAL")
  field(LNK3, "BL12I-MO-IOC-03:SCAN2D.D08PV")
}

# end(generic-9menu16)






#! Generated by VisualDCT v2.6

# % macro, __doc__, Provides PVs to start and monitor homing via homing PLCs 
# that conform to the DLS standard. If you use custom homing states then be 
# sure to label them here
# % macro, P, Pv Prefix
# % macro, PLC, PLC number
# % macro, PORT, Serial port to do communications across
# % macro, GRP1, Homing group 1 description
# % macro, GRP2, Homing group 2 description
# % macro, GRP3, Homing group 3 description
# % macro, GRP4, Homing group 4 description
# % macro, GRP5, Homing group 5 description
# % macro, GRP6, Homing group 6 description
# % macro, GRP7, Homing group 7 description
# % macro, STATE11, Homing state 11 description
# % macro, STATE12, Homing state 11 description
# % macro, STATE13, Homing state 11 description
# % macro, STATE14, Homing state 11 description
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, , edm, autohome.edl, P=BL12I-AL-SLITS-02
record(asyn, "BL12I-AL-SLITS-02:HM:ASYN1") {
  field(DESC, "User cmd to PMAC")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "asynRecordDevice")
  field(PORT, "geobrick_eth6")
}

record(stringout, "BL12I-AL-SLITS-02:HM:ABORT") {
  field(DESC, "Send abort cmd")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(VAL, "P1101=2")
  field(OUT, "BL12I-AL-SLITS-02:HM:ASYN1.AOUT PP")
}

# This will read the P variables P1101 and P1100
# from the PMAC in one command.
record(asyn, "BL12I-AL-SLITS-02:HM:ASYN2") {
  field(DESC, "Read homing status from PMAC")
  field(SCAN, ".2 second")
  field(PINI, "NO")
  field(DTYP, "asynRecordDevice")
  field(PORT, "geobrick_eth6")
  field(AOUT, "P1101 P1100 P1102")
  field(FLNK, "BL12I-AL-SLITS-02:HM:FAN1")
  field(DISV, "0")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:PARSE1") {
  field(DESC, "Parse PMAC response to P1101")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(CALC, "SSCANF(AA,'%d %*d %*d')")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(INAA, "BL12I-AL-SLITS-02:HM:ASYN2.AINP")
  field(FLNK, "BL12I-AL-SLITS-02:HM:STATUS")
  field(PREC, "0")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:PARSE2") {
  field(DESC, "Parse PMAC response to P1100")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(CALC, "SSCANF(AA,'%*d %d %*d')")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(INAA, "BL12I-AL-SLITS-02:HM:ASYN2.AINP")
  field(FLNK, "BL12I-AL-SLITS-02:HM:STATE")
  field(PREC, "0")
}

record(mbbi, "BL12I-AL-SLITS-02:HM:STATUS") {
  field(DESC, "Homing status")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Done")
  field(ONST, "Homing")
  field(TWST, "Aborted")
  field(THST, "Timeout")
  field(FLNK, "BL12I-AL-SLITS-02:HM:CHECK")
  field(INP, "BL12I-AL-SLITS-02:HM:PARSE1")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "NO_ALARM")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
  field(FRSV, "MAJOR")
  field(FVSV, "MAJOR")
  field(SXSV, "MAJOR")
  field(SVSV, "MAJOR")
  field(FRST, "Fatal foll err")
  field(FVST, "Stopped on lim")
  field(SXST, "Incomplete Home")
  field(SVST, "Invalid Setting")
}

record(mbbi, "BL12I-AL-SLITS-02:HM:STATE") {
  field(DESC, "Homing state")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Idle")
  field(ONST, "Configuring")
  field(TWST, "Move to neg lim")
  field(THST, "Move to pos lim")
  field(FRVL, "4")
  field(FRST, "Homing")
  field(INP, "BL12I-AL-SLITS-02:HM:PARSE2")
  field(FVVL, "5")
  field(FVST, "Post home move")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(SXST, "Aligning")
  field(SVST, "Done")
  field(EIST, "Fast Hm Search")
  field(NIST, "Fast Retrace")
  field(TEST, "Pre home move")
  field(ELST, "")
  field(TVST, "")
  field(TTST, "")
  field(FTST, "")
}

record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
  field(FLNK, "BL12I-AL-SLITS-02:HM:HOMED")
}

record(bo, "BL12I-AL-SLITS-02:HM:HOME") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-SLITS-02:HM:START")
}

record(calcout, "BL12I-AL-SLITS-02:HM:CHECK") {
  field(CALC, "A==1")
  field(INPA, "BL12I-AL-SLITS-02:HM:PARSE1 PP")
  field(OUT, "BL12I-AL-SLITS-02:HM:HOMING CA")
  field(OOPT, "When Zero")
  field(DOPT, "Use CALC")
}

record(fanout, "BL12I-AL-SLITS-02:HM:FAN1") {
  field(FLNK, "BL12I-AL-SLITS-02:HM:PARSE1")
  field(LNK1, "BL12I-AL-SLITS-02:HM:PARSE2")
  field(LNK2, "BL12I-AL-SLITS-02:HM:PARSE3")
}

record(bo, "BL12I-AL-SLITS-02:HM:HOMED") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-SLITS-02:HM:HOME")
  field(OUT, "BL12I-AL-SLITS-02:HM:HOME PP")
  field(VAL, "0")
}

record(bo, "BL12I-AL-SLITS-02:HM:BUF1") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-SLITS-02:HM:STARTHMP")
  field(OUT, "BL12I-AL-SLITS-02:HM:HOMING PP")
}

record(calcout, "BL12I-AL-SLITS-02:HM:START") {
  field(DESC, "Check if usr started")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "A")
  field(INPA, "BL12I-AL-SLITS-02:HM:HOME PP")
  field(OUT, "BL12I-AL-SLITS-02:HM:BUF1 PP")
  field(OOPT, "Transition To Non-zero")
  field(DOPT, "Use CALC")
}

record(stringout, "BL12I-AL-SLITS-02:HM:STARTHMP") {
  field(DESC, "Start homing plc/prog")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(VAL, "ENABLE PLC11")
  field(OUT, "BL12I-AL-SLITS-02:HM:ASYN1.AOUT PP")
}

record(mbbo, "BL12I-AL-SLITS-02:HM:HMGRP") {
  field(DESC, "Homing group")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-SLITS-02:HM:SENDGRP")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(ZRST, "none")
  field(ONST, "All")
  field(TWST, "Top")
  field(THST, "Bottom")
  field(FRST, "Outboard")
  field(FVST, "Inboard")
  field(SXST, "")
  field(SVST, "")
  field(UNSV, "INVALID")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:SENDGRP") {
  field(DESC, "Select group on pmac")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "PRINTF('P1102=%i',A)")
  field(INPA, "BL12I-AL-SLITS-02:HM:HMGRP PP")
  field(OUT, "BL12I-AL-SLITS-02:HM:ASYN1.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:PARSE3") {
  field(DESC, "Parse pmac P1102")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "SSCANF(AA,'%*d %*d %d')")
  field(INAA, "BL12I-AL-SLITS-02:HM:ASYN2.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(PREC, "0")
  field(OUT, "BL12I-AL-SLITS-02:HM:PARSE4 PP")
}

record(ao, "BL12I-AL-SLITS-02:HM:PLC") {
  field(DTYP, "Soft Channel")
  field(VAL, "11")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:TI2") {
  field(DESC, "create string with ivar")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "PRINTF('i%i i10',A)")
  field(OUT, "BL12I-AL-SLITS-02:HM:ASYN3.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(calcout, "BL12I-AL-SLITS-02:HM:TI1") {
  field(DESC, "calc timer ivar")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(CALC, "5111+(A&30)*50+A%2")
  field(INPA, "BL12I-AL-SLITS-02:HM:PLC PP")
  field(OUT, "BL12I-AL-SLITS-02:HM:TI2.A PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(asyn, "BL12I-AL-SLITS-02:HM:ASYN3") {
  field(DESC, "Read timer")
  field(SCAN, ".2 second")
  field(PINI, "NO")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")
  field(FLNK, "BL12I-AL-SLITS-02:HM:FAN2")
  field(PORT, "geobrick_eth6")
  field(DISV, "0")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:TIMER") {
  field(DESC, "parse timer")
  field(DTYP, "Soft Channel")
  field(CALC, "SSCANF(AA, '%d %*d')")
  field(INAA, "BL12I-AL-SLITS-02:HM:ASYN3.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
}

record(fanout, "BL12I-AL-SLITS-02:HM:FAN2") {
  field(FLNK, "BL12I-AL-SLITS-02:HM:TIMER")
  field(LNK1, "BL12I-AL-SLITS-02:HM:I10")
}

record(scalcout, "BL12I-AL-SLITS-02:HM:I10") {
  field(DESC, "parse timer")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-SLITS-02:HM:TIMEOUT")
  field(CALC, "SSCANF(AA, '%*d %d')")
  field(INAA, "BL12I-AL-SLITS-02:HM:ASYN3.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
}

record(calcout, "BL12I-AL-SLITS-02:HM:TIMEOUT") {
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "A/8388608*B/1000")
  field(INPA, "BL12I-AL-SLITS-02:HM:TIMER")
  field(INPB, "BL12I-AL-SLITS-02:HM:I10")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(EGU, "s")
  field(PREC, "3")
}

record(stringout, "BL12I-AL-SLITS-02:HM:M1PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M2PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M3PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M4PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M5PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M6PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M7PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M8PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M9PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M10PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M11PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M12PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M13PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M14PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M15PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M16PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M17PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M18PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M19PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M20PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M21PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M22PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M23PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M24PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M25PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M26PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M27PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M28PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M29PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M30PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M31PV") {
}

record(stringout, "BL12I-AL-SLITS-02:HM:M32PV") {
}

record(longout, "BL12I-AL-SLITS-02:HM:PARSE4") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-SLITS-02:HM:HMGRP PP")
}

#! Generated by VisualDCT v2.6

# % macro, __doc__, Provides PVs to start and monitor homing via homing PLCs 
# that conform to the DLS standard. If you use custom homing states then be 
# sure to label them here
# % macro, P, Pv Prefix
# % macro, PLC, PLC number
# % macro, PORT, Serial port to do communications across
# % macro, GRP1, Homing group 1 description
# % macro, GRP2, Homing group 2 description
# % macro, GRP3, Homing group 3 description
# % macro, GRP4, Homing group 4 description
# % macro, GRP5, Homing group 5 description
# % macro, GRP6, Homing group 6 description
# % macro, GRP7, Homing group 7 description
# % macro, STATE11, Homing state 11 description
# % macro, STATE12, Homing state 11 description
# % macro, STATE13, Homing state 11 description
# % macro, STATE14, Homing state 11 description
# % macro, name, Object name and gui association name
# This associates an edm screen with the template
# % gui, , edm, autohome.edl, P=BL12I-AL-ATTN-02
record(asyn, "BL12I-AL-ATTN-02:HM:ASYN1") {
  field(DESC, "User cmd to PMAC")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "asynRecordDevice")
  field(PORT, "geobrick_eth5")
}

record(stringout, "BL12I-AL-ATTN-02:HM:ABORT") {
  field(DESC, "Send abort cmd")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(VAL, "P1101=2")
  field(OUT, "BL12I-AL-ATTN-02:HM:ASYN1.AOUT PP")
}

# This will read the P variables P1101 and P1100
# from the PMAC in one command.
record(asyn, "BL12I-AL-ATTN-02:HM:ASYN2") {
  field(DESC, "Read homing status from PMAC")
  field(SCAN, ".2 second")
  field(PINI, "NO")
  field(DTYP, "asynRecordDevice")
  field(PORT, "geobrick_eth5")
  field(AOUT, "P1101 P1100 P1102")
  field(FLNK, "BL12I-AL-ATTN-02:HM:FAN1")
  field(DISV, "0")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:PARSE1") {
  field(DESC, "Parse PMAC response to P1101")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(CALC, "SSCANF(AA,'%d %*d %*d')")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(INAA, "BL12I-AL-ATTN-02:HM:ASYN2.AINP")
  field(FLNK, "BL12I-AL-ATTN-02:HM:STATUS")
  field(PREC, "0")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:PARSE2") {
  field(DESC, "Parse PMAC response to P1100")
  field(DTYP, "Soft Channel")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(CALC, "SSCANF(AA,'%*d %d %*d')")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(INAA, "BL12I-AL-ATTN-02:HM:ASYN2.AINP")
  field(FLNK, "BL12I-AL-ATTN-02:HM:STATE")
  field(PREC, "0")
}

record(mbbi, "BL12I-AL-ATTN-02:HM:STATUS") {
  field(DESC, "Homing status")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Done")
  field(ONST, "Homing")
  field(TWST, "Aborted")
  field(THST, "Timeout")
  field(FLNK, "BL12I-AL-ATTN-02:HM:CHECK")
  field(INP, "BL12I-AL-ATTN-02:HM:PARSE1")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(ZRSV, "NO_ALARM")
  field(ONSV, "NO_ALARM")
  field(TWSV, "MINOR")
  field(THSV, "MAJOR")
  field(FRSV, "MAJOR")
  field(FVSV, "MAJOR")
  field(SXSV, "MAJOR")
  field(SVSV, "MAJOR")
  field(FRST, "Fatal foll err")
  field(FVST, "Stopped on lim")
  field(SXST, "Incomplete Home")
  field(SVST, "Invalid Setting")
}

record(mbbi, "BL12I-AL-ATTN-02:HM:STATE") {
  field(DESC, "Homing state")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "Idle")
  field(ONST, "Configuring")
  field(TWST, "Move to neg lim")
  field(THST, "Move to pos lim")
  field(FRVL, "4")
  field(FRST, "Homing")
  field(INP, "BL12I-AL-ATTN-02:HM:PARSE2")
  field(FVVL, "5")
  field(FVST, "Post home move")
  field(SXVL, "6")
  field(SVVL, "7")
  field(EIVL, "8")
  field(NIVL, "9")
  field(TEVL, "10")
  field(ELVL, "11")
  field(TVVL, "12")
  field(TTVL, "13")
  field(FTVL, "14")
  field(SXST, "Aligning")
  field(SVST, "Done")
  field(EIST, "Fast Hm Search")
  field(NIST, "Fast Retrace")
  field(TEST, "Pre home move")
  field(ELST, "")
  field(TVST, "")
  field(TTST, "")
  field(FTST, "")
}

record(busy, "BL12I-AL-ATTN-02:HM:HOMING") {
  field(FLNK, "BL12I-AL-ATTN-02:HM:HOMED")
}

record(bo, "BL12I-AL-ATTN-02:HM:HOME") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:HM:START")
}

record(calcout, "BL12I-AL-ATTN-02:HM:CHECK") {
  field(CALC, "A==1")
  field(INPA, "BL12I-AL-ATTN-02:HM:PARSE1 PP")
  field(OUT, "BL12I-AL-ATTN-02:HM:HOMING CA")
  field(OOPT, "When Zero")
  field(DOPT, "Use CALC")
}

record(fanout, "BL12I-AL-ATTN-02:HM:FAN1") {
  field(FLNK, "BL12I-AL-ATTN-02:HM:PARSE1")
  field(LNK1, "BL12I-AL-ATTN-02:HM:PARSE2")
  field(LNK2, "BL12I-AL-ATTN-02:HM:PARSE3")
}

record(bo, "BL12I-AL-ATTN-02:HM:HOMED") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:HM:HOME")
  field(OUT, "BL12I-AL-ATTN-02:HM:HOME PP")
  field(VAL, "0")
}

record(bo, "BL12I-AL-ATTN-02:HM:BUF1") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:HM:STARTHMP")
  field(OUT, "BL12I-AL-ATTN-02:HM:HOMING PP")
}

record(calcout, "BL12I-AL-ATTN-02:HM:START") {
  field(DESC, "Check if usr started")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "A")
  field(INPA, "BL12I-AL-ATTN-02:HM:HOME PP")
  field(OUT, "BL12I-AL-ATTN-02:HM:BUF1 PP")
  field(OOPT, "Transition To Non-zero")
  field(DOPT, "Use CALC")
}

record(stringout, "BL12I-AL-ATTN-02:HM:STARTHMP") {
  field(DESC, "Start homing plc/prog")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(VAL, "ENABLE PLC11")
  field(OUT, "BL12I-AL-ATTN-02:HM:ASYN1.AOUT PP")
}

record(mbbo, "BL12I-AL-ATTN-02:HM:HMGRP") {
  field(DESC, "Homing group")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:HM:SENDGRP")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(FRVL, "4")
  field(FVVL, "5")
  field(SXVL, "6")
  field(SVVL, "7")
  field(ZRST, "none")
  field(ONST, "All")
  field(TWST, "Filters")
  field(THST, "")
  field(FRST, "")
  field(FVST, "")
  field(SXST, "")
  field(SVST, "")
  field(UNSV, "INVALID")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "0")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:SENDGRP") {
  field(DESC, "Select group on pmac")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "PRINTF('P1102=%i',A)")
  field(INPA, "BL12I-AL-ATTN-02:HM:HMGRP PP")
  field(OUT, "BL12I-AL-ATTN-02:HM:ASYN1.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:PARSE3") {
  field(DESC, "Parse pmac P1102")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "SSCANF(AA,'%*d %*d %d')")
  field(INAA, "BL12I-AL-ATTN-02:HM:ASYN2.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(PREC, "0")
  field(OUT, "BL12I-AL-ATTN-02:HM:PARSE4 PP")
}

record(ao, "BL12I-AL-ATTN-02:HM:PLC") {
  field(DTYP, "Soft Channel")
  field(VAL, "11")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:TI2") {
  field(DESC, "create string with ivar")
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "PRINTF('i%i i10',A)")
  field(OUT, "BL12I-AL-ATTN-02:HM:ASYN3.AOUT PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(calcout, "BL12I-AL-ATTN-02:HM:TI1") {
  field(DESC, "calc timer ivar")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(CALC, "5111+(A&30)*50+A%2")
  field(INPA, "BL12I-AL-ATTN-02:HM:PLC PP")
  field(OUT, "BL12I-AL-ATTN-02:HM:TI2.A PP")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(asyn, "BL12I-AL-ATTN-02:HM:ASYN3") {
  field(DESC, "Read timer")
  field(SCAN, ".2 second")
  field(PINI, "NO")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")
  field(FLNK, "BL12I-AL-ATTN-02:HM:FAN2")
  field(PORT, "geobrick_eth5")
  field(DISV, "0")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:TIMER") {
  field(DESC, "parse timer")
  field(DTYP, "Soft Channel")
  field(CALC, "SSCANF(AA, '%d %*d')")
  field(INAA, "BL12I-AL-ATTN-02:HM:ASYN3.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
}

record(fanout, "BL12I-AL-ATTN-02:HM:FAN2") {
  field(FLNK, "BL12I-AL-ATTN-02:HM:TIMER")
  field(LNK1, "BL12I-AL-ATTN-02:HM:I10")
}

record(scalcout, "BL12I-AL-ATTN-02:HM:I10") {
  field(DESC, "parse timer")
  field(DTYP, "Soft Channel")
  field(FLNK, "BL12I-AL-ATTN-02:HM:TIMEOUT")
  field(CALC, "SSCANF(AA, '%*d %d')")
  field(INAA, "BL12I-AL-ATTN-02:HM:ASYN3.AINP")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
}

record(calcout, "BL12I-AL-ATTN-02:HM:TIMEOUT") {
  field(SCAN, "Passive")
  field(DTYP, "Soft Channel")
  field(CALC, "A/8388608*B/1000")
  field(INPA, "BL12I-AL-ATTN-02:HM:TIMER")
  field(INPB, "BL12I-AL-ATTN-02:HM:I10")
  field(OOPT, "On Change")
  field(DOPT, "Use CALC")
  field(EGU, "s")
  field(PREC, "3")
}

record(stringout, "BL12I-AL-ATTN-02:HM:M1PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M2PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M3PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M4PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M5PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M6PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M7PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M8PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M9PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M10PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M11PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M12PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M13PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M14PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M15PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M16PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M17PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M18PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M19PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M20PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M21PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M22PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M23PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M24PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M25PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M26PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M27PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M28PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M29PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M30PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M31PV") {
}

record(stringout, "BL12I-AL-ATTN-02:HM:M32PV") {
}

record(longout, "BL12I-AL-ATTN-02:HM:PARSE4") {
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-AL-ATTN-02:HM:HMGRP PP")
}






#! Generated by VisualDCT v2.6

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS1:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS1:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS1:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS1:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS1:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS1:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS1:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS1:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS1:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#1?,BL12I-MO-STEP-05:AXIS1) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS1:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS1:status3") {
}

# end(pmacStatusAxis)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis2)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS2:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS2:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS2:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS2:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS2:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS2:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS2:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS2:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS2:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#2?,BL12I-MO-STEP-05:AXIS2) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS2:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS2:status3") {
}

# end(pmacStatusAxis2)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis3)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS3:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS3:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS3:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS3:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS3:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS3:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS3:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS3:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS3:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#3?,BL12I-MO-STEP-05:AXIS3) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS3:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS3:status3") {
}

# end(pmacStatusAxis3)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis4)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS4:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS4:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS4:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS4:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS4:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS4:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS4:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS4:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS4:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#4?,BL12I-MO-STEP-05:AXIS4) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS4:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS4:status3") {
}

# end(pmacStatusAxis4)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis5)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS5:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS5:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS5:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS5:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS5:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS5:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS5:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS5:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS5:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#5?,BL12I-MO-STEP-05:AXIS5) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS5:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS5:status3") {
}

# end(pmacStatusAxis5)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis6)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS6:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS6:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS6:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS6:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS6:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS6:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS6:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS6:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS6:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#6?,BL12I-MO-STEP-05:AXIS6) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS6:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS6:status3") {
}

# end(pmacStatusAxis6)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis7)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS7:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS7:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS7:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS7:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS7:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS7:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS7:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS7:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS7:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#7?,BL12I-MO-STEP-05:AXIS7) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS7:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS7:status3") {
}

# end(pmacStatusAxis7)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis8)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-05:AXIS8:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8P) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS8:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8F) geobrick_eth5")
}

record(ai, "BL12I-MO-STEP-05:AXIS8:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8V) geobrick_eth5")
}

record(seq, "BL12I-MO-STEP-05:AXIS8:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS8:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS8:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS8:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS8:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS8:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#8?,BL12I-MO-STEP-05:AXIS8) geobrick_eth5")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS8:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:AXIS8:status3") {
}

# end(pmacStatusAxis8)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatus.vdb", pmacStatus)

# These define the macros to be passed to the template
# % macro, name,    Object and gui association name
# % macro, DEVICE,  Pmac/Geobrick name
# % macro, VERSION, 0 for Pmac, 1 for Geobrick
# % macro, PLC,     PLC for CPU load monitoring, e.g. 5
# % macro, PORT,    Asyn port
# % macro, NAXES,   Number of axes
#
# This associates an edm screen with the template
# % gui, , edm, pmacStatus.edl, pmac=BL12I-MO-STEP-05
#
# Scan rate for pmac status, plc querying, cpu load querying
record(fanout, "BL12I-MO-STEP-05:ReadBack") {
  field(SCAN, "1 second")
  field(FLNK, "BL12I-MO-STEP-05:ReadBack2")
  field(LNK1, "BL12I-MO-STEP-05:CTRLSTAT:status1")
  field(LNK2, "BL12I-MO-STEP-05:CPULOAD")
  field(LNK3, "BL12I-MO-STEP-05:PLCGET")
  field(LNK4, "BL12I-MO-STEP-05:PROGGET")
  field(LNK5, "BL12I-MO-STEP-05:MACROERRS")
  field(LNK6, "BL12I-MO-STEP-05:AxisRB")
}

record(fanout, "BL12I-MO-STEP-05:ReadBack2") {
  field(SCAN, "1 second")
  field(LNK1, "BL12I-MO-STEP-05:GPIO_INPUTS_GET")
  field(LNK2, "BL12I-MO-STEP-05:GPIO_OUTPUTS_GET")
}

# pmac type record
record(mbbi, "BL12I-MO-STEP-05:PMACTYPE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZRVL, "603382")
  field(ONVL, "602413")
  field(ZRST, "Geobrick LV")
  field(ONST, "Turbo PMAC2")
  field(INP, "@pmac.proto getIntVar(cid) geobrick_eth5")
}

# % archiver 10 Monitor
# This makes the component icon reflect the severity
# % gui, , sevr
record(ai, "BL12I-MO-STEP-05:CPULOAD") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(P1075) geobrick_eth5")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "%")
  field(ASLO, "100")
  field(HIGH, "60")
  field(HSV, "MINOR")
  field(HIHI, "80")
  field(HHSV, "MAJOR")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:CTRLSTAT:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(???,BL12I-MO-STEP-05:CTRLSTAT) geobrick_eth5")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:CTRLSTAT:status2") {
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:CTRLSTAT:status3") {
}

record(waveform, "BL12I-MO-STEP-05:PLCGET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-05:PLCPARSE")
  field(INP, "@pmac.proto getPlcsDisabled1 geobrick_eth5")
  field(NELM, "32")
  field(FTVL, "USHORT")
  field(DESC, "Query plcs cmd")
}

record(genSub, "BL12I-MO-STEP-05:PLCPARSE") {
  field(SNAM, "parsePlcBitString")
  field(INPA, "BL12I-MO-STEP-05:PLCGET.VAL")
  field(FTA, "USHORT")
  field(NOA, "32")
  field(FTVA, "ULONG")
  field(FTVB, "ULONG")
  field(FLNK, "BL12I-MO-STEP-05:PLCDISBITS00")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:PLCDISBITS00") {
  field(FLNK, "BL12I-MO-STEP-05:PLCDISBITS01")
  field(INP, "BL12I-MO-STEP-05:PLCPARSE.VALA")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:PLCDISBITS01") {
  field(INP, "BL12I-MO-STEP-05:PLCPARSE.VALB")
}

record(waveform, "BL12I-MO-STEP-05:GPIO_INPUTS_GET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-05:GPIO_INP_PARSE")
  field(INP, "@pmac.proto getGPIOInputs1 geobrick_eth5")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(DESC, "Query GPIO Inputs")
}

record(genSub, "BL12I-MO-STEP-05:GPIO_INP_PARSE") {
  field(SNAM, "parseGPIOBitString")
  field(INPA, "BL12I-MO-STEP-05:GPIO_INPUTS_GET.VAL")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-05:GPIO_INP_BITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:GPIO_INP_BITS") {
  field(INP, "BL12I-MO-STEP-05:GPIO_INP_PARSE.VALA")
}

record(waveform, "BL12I-MO-STEP-05:GPIO_OUTPUTS_GET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-05:GPIO_OP_PARSE")
  field(INP, "@pmac.proto getGPIOOutputs1 geobrick_eth5")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(DESC, "Query GPIO Outputs")
}

record(genSub, "BL12I-MO-STEP-05:GPIO_OP_PARSE") {
  field(SNAM, "parseGPIOBitString")
  field(INPA, "BL12I-MO-STEP-05:GPIO_OUTPUTS_GET.VAL")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-05:GPIO_OP_BITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:GPIO_OP_BITS") {
  field(INP, "BL12I-MO-STEP-05:GPIO_OP_PARSE.VALA")
}

record(waveform, "BL12I-MO-STEP-05:PROGGET") {
  field(DESC, "Query motion progs")
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-05:PROGPARSE")
  field(INP, "@pmac.proto getMotionProgramActive1 geobrick_eth5")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(SIOL, "@")
}

record(genSub, "BL12I-MO-STEP-05:PROGPARSE") {
  field(SNAM, "parseProgBitString")
  field(INPA, "BL12I-MO-STEP-05:PROGGET")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-05:PROGBITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-05:PROGBITS") {
  field(INP, "BL12I-MO-STEP-05:PROGPARSE.VALA")
}

record(ai, "BL12I-MO-STEP-05:MACROERRS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(M5035) geobrick_eth5")
}

# I3 value 0 to 3 I/O Handshake control
record(mbbi, "BL12I-MO-STEP-05:IO_HANDSHAKE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "No Ack (0)")
  field(ONST, "Dumb term (1)")
  field(TWST, "Fast comms (2)")
  field(THST, "Fastcomms+LF(3)")
  field(INP, "@pmac.proto getIntVar(I3) geobrick_eth5")
}

# I5 PLC Program Control
record(mbbi, "BL12I-MO-STEP-05:PLC_CONTROL") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I5) geobrick_eth5")
  field(ZRVL, "0")
  field(ZRST, "NONE (0)")
  field(ONVL, "1")
  field(ONST, "PLC 0 (1)")
  field(TWVL, "2")
  field(TWST, "PLC 1-31 (2)")
  field(THVL, "3")
  field(THST, "ALL (3)")
}

# I6 Error reporting mode
record(mbbi, "BL12I-MO-STEP-05:ERRREPMODE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I6) geobrick_eth5")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
# the <BELL> character is given for invalid commands
  field(ZRST, "BELL(0)")
#the form of the error message is <BELL>{error message}
  field(ONST, "BELL+ERR(1)")
#the <BELL> character is given only for invalid commands from the host; 
# there is no response to invalid commands issued from Turbo PMAC programs.
  field(TWST, "BELL-PRG(2)")
#<BELL><CR>{error message}
  field(THST, "BELL+CR+ERR(3)")
}

# I56 DPRAM ASCII Communications Interrupt
record(bi, "BL12I-MO-STEP-05:DPRAM_COMMS_INT") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I56) geobrick_eth5")
  field(ONAM, "ENABLED")
  field(PINI, "YES")
  field(SCAN, "Passive")
  field(ZNAM, "DISABLED")
}

# I58 DPRAM ASCII Communications Enable
record(bi, "BL12I-MO-STEP-05:DPRAM_COMMS") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I58) geobrick_eth5")
  field(ZNAM, "DISABLED")
  field(ONAM, "ENABLED")
}

# I90 VME Address modifier
record(mbbi, "BL12I-MO-STEP-05:VME_ADDR_MODE") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I90) geobrick_eth5")
  field(ZRVL, "0x29")
  field(ONVL, "0x39")
  field(TWVL, "0x09")
  field(ZRST, "16-bit addr")
  field(ONST, "24-bit addr")
  field(TWST, "32-bit addr")
}

# I97 VME DPRAM Base Address Bits A23-A20
record(longin, "BL12I-MO-STEP-05:VME_DPRAMBASE") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I97) geobrick_eth5")
  field(PINI, "YES")
}

# I95 VME Interrupt Level
record(longin, "BL12I-MO-STEP-05:VME_INTLVL") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I95) geobrick_eth5")
  field(PINI, "YES")
}

record(seq, "BL12I-MO-STEP-05:AXIS1:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS2:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS3:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS4:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS5:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS6:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS7:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS8:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS9:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS10:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS11:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS12:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS13:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS14:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS15:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS16:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS17:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS18:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS19:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS20:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS21:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS22:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS23:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS24:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS25:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS26:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS27:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS28:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS29:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS30:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS31:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AXIS32:ReadBack") {
}

record(seq, "BL12I-MO-STEP-05:AxisRB") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS1:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS2:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS3:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS4:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-05:AXIS5:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-05:AXIS6:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-05:AXIS7:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-05:AXIS8:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-05:AxisRB2.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-05:AxisRB2") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS9:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS10:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS11:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS12:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-05:AXIS13:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-05:AXIS14:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-05:AXIS15:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-05:AXIS16:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-05:AxisRB3.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-05:AxisRB3") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS17:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS18:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS19:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS20:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-05:AXIS21:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-05:AXIS22:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-05:AXIS23:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-05:AXIS24:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-05:AxisRB4.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-05:AxisRB4") {
  field(LNK1, "BL12I-MO-STEP-05:AXIS25:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-05:AXIS26:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-05:AXIS27:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-05:AXIS28:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-05:AXIS29:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-05:AXIS30:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-05:AXIS31:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-05:AXIS32:ReadBack.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
}

record(longin, "BL12I-MO-STEP-05:NAXES") {
  field(PINI, "YES")
  field(VAL, "8")
}

# end(pmacStatus)

#! Generated by VisualDCT v2.6

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS1:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS1:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS1:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS1:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS1:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS1:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS1:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS1:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS1:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#1?,BL12I-MO-STEP-06:AXIS1) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS1:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS1:status3") {
}

# end(pmacStatusAxis)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis2)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS2:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS2:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS2:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS2:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS2:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS2:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS2:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS2:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS2:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#2?,BL12I-MO-STEP-06:AXIS2) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS2:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS2:status3") {
}

# end(pmacStatusAxis2)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis3)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS3:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS3:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS3:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS3:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS3:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS3:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS3:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS3:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS3:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#3?,BL12I-MO-STEP-06:AXIS3) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS3:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS3:status3") {
}

# end(pmacStatusAxis3)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis4)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS4:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS4:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS4:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS4:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS4:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS4:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS4:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS4:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS4:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#4?,BL12I-MO-STEP-06:AXIS4) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS4:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS4:status3") {
}

# end(pmacStatusAxis4)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis5)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS5:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS5:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS5:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS5:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS5:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS5:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS5:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS5:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS5:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#5?,BL12I-MO-STEP-06:AXIS5) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS5:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS5:status3") {
}

# end(pmacStatusAxis5)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis6)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS6:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS6:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS6:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#6V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS6:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS6:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS6:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS6:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS6:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS6:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#6?,BL12I-MO-STEP-06:AXIS6) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS6:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS6:status3") {
}

# end(pmacStatusAxis6)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis7)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS7:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS7:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS7:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS7:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS7:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS7:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS7:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS7:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS7:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#7?,BL12I-MO-STEP-06:AXIS7) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS7:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS7:status3") {
}

# end(pmacStatusAxis7)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatusAxis.vdb", pmacStatusAxis8)

# % macro, DEVICE,  Pmac/Geobrick name
# % macro, AXIS,    Axis number
# % macro, PORT,    Asyn port
record(ai, "BL12I-MO-STEP-06:AXIS8:POSITION") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8P) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS8:FOLL_ERROR") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8F) geobrick_eth6")
}

record(ai, "BL12I-MO-STEP-06:AXIS8:VELOCITY") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#8V) geobrick_eth6")
}

record(seq, "BL12I-MO-STEP-06:AXIS8:ReadBack") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS8:POSITION.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS8:FOLL_ERROR.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS8:VELOCITY.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS8:status1.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS8:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(#8?,BL12I-MO-STEP-06:AXIS8) geobrick_eth6")
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS8:status2") {
}

#% archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:AXIS8:status3") {
}

# end(pmacStatusAxis8)

# expand("/dls_sw/prod/R3.14.11/support/pmacUtil/4-2/pmacUtilApp/Db/O.linux-x86/../pmacStatus.vdb", pmacStatus)

# These define the macros to be passed to the template
# % macro, name,    Object and gui association name
# % macro, DEVICE,  Pmac/Geobrick name
# % macro, VERSION, 0 for Pmac, 1 for Geobrick
# % macro, PLC,     PLC for CPU load monitoring, e.g. 5
# % macro, PORT,    Asyn port
# % macro, NAXES,   Number of axes
#
# This associates an edm screen with the template
# % gui, , edm, pmacStatus.edl, pmac=BL12I-MO-STEP-06
#
# Scan rate for pmac status, plc querying, cpu load querying
record(fanout, "BL12I-MO-STEP-06:ReadBack") {
  field(SCAN, "1 second")
  field(FLNK, "BL12I-MO-STEP-06:ReadBack2")
  field(LNK1, "BL12I-MO-STEP-06:CTRLSTAT:status1")
  field(LNK2, "BL12I-MO-STEP-06:CPULOAD")
  field(LNK3, "BL12I-MO-STEP-06:PLCGET")
  field(LNK4, "BL12I-MO-STEP-06:PROGGET")
  field(LNK5, "BL12I-MO-STEP-06:MACROERRS")
  field(LNK6, "BL12I-MO-STEP-06:AxisRB")
}

record(fanout, "BL12I-MO-STEP-06:ReadBack2") {
  field(SCAN, "1 second")
  field(LNK1, "BL12I-MO-STEP-06:GPIO_INPUTS_GET")
  field(LNK2, "BL12I-MO-STEP-06:GPIO_OUTPUTS_GET")
}

# pmac type record
record(mbbi, "BL12I-MO-STEP-06:PMACTYPE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZRVL, "603382")
  field(ONVL, "602413")
  field(ZRST, "Geobrick LV")
  field(ONST, "Turbo PMAC2")
  field(INP, "@pmac.proto getIntVar(cid) geobrick_eth6")
}

# % archiver 10 Monitor
# This makes the component icon reflect the severity
# % gui, , sevr
record(ai, "BL12I-MO-STEP-06:CPULOAD") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(P1075) geobrick_eth6")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "%")
  field(ASLO, "100")
  field(HIGH, "60")
  field(HSV, "MINOR")
  field(HIHI, "80")
  field(HHSV, "MAJOR")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:CTRLSTAT:status1") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getStatus(???,BL12I-MO-STEP-06:CTRLSTAT) geobrick_eth6")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:CTRLSTAT:status2") {
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:CTRLSTAT:status3") {
}

record(waveform, "BL12I-MO-STEP-06:PLCGET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-06:PLCPARSE")
  field(INP, "@pmac.proto getPlcsDisabled1 geobrick_eth6")
  field(NELM, "32")
  field(FTVL, "USHORT")
  field(DESC, "Query plcs cmd")
}

record(genSub, "BL12I-MO-STEP-06:PLCPARSE") {
  field(SNAM, "parsePlcBitString")
  field(INPA, "BL12I-MO-STEP-06:PLCGET.VAL")
  field(FTA, "USHORT")
  field(NOA, "32")
  field(FTVA, "ULONG")
  field(FTVB, "ULONG")
  field(FLNK, "BL12I-MO-STEP-06:PLCDISBITS00")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:PLCDISBITS00") {
  field(FLNK, "BL12I-MO-STEP-06:PLCDISBITS01")
  field(INP, "BL12I-MO-STEP-06:PLCPARSE.VALA")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:PLCDISBITS01") {
  field(INP, "BL12I-MO-STEP-06:PLCPARSE.VALB")
}

record(waveform, "BL12I-MO-STEP-06:GPIO_INPUTS_GET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-06:GPIO_INP_PARSE")
  field(INP, "@pmac.proto getGPIOInputs1 geobrick_eth6")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(DESC, "Query GPIO Inputs")
}

record(genSub, "BL12I-MO-STEP-06:GPIO_INP_PARSE") {
  field(SNAM, "parseGPIOBitString")
  field(INPA, "BL12I-MO-STEP-06:GPIO_INPUTS_GET.VAL")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-06:GPIO_INP_BITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:GPIO_INP_BITS") {
  field(INP, "BL12I-MO-STEP-06:GPIO_INP_PARSE.VALA")
}

record(waveform, "BL12I-MO-STEP-06:GPIO_OUTPUTS_GET") {
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-06:GPIO_OP_PARSE")
  field(INP, "@pmac.proto getGPIOOutputs1 geobrick_eth6")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(DESC, "Query GPIO Outputs")
}

record(genSub, "BL12I-MO-STEP-06:GPIO_OP_PARSE") {
  field(SNAM, "parseGPIOBitString")
  field(INPA, "BL12I-MO-STEP-06:GPIO_OUTPUTS_GET.VAL")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-06:GPIO_OP_BITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:GPIO_OP_BITS") {
  field(INP, "BL12I-MO-STEP-06:GPIO_OP_PARSE.VALA")
}

record(waveform, "BL12I-MO-STEP-06:PROGGET") {
  field(DESC, "Query motion progs")
  field(DTYP, "stream")
  field(FLNK, "BL12I-MO-STEP-06:PROGPARSE")
  field(INP, "@pmac.proto getMotionProgramActive1 geobrick_eth6")
  field(NELM, "16")
  field(FTVL, "USHORT")
  field(SIOL, "@")
}

record(genSub, "BL12I-MO-STEP-06:PROGPARSE") {
  field(SNAM, "parseProgBitString")
  field(INPA, "BL12I-MO-STEP-06:PROGGET")
  field(FTA, "USHORT")
  field(NOA, "16")
  field(FTVA, "ULONG")
  field(FLNK, "BL12I-MO-STEP-06:PROGBITS")
}

# % archiver 10 Monitor
record(mbbiDirect, "BL12I-MO-STEP-06:PROGBITS") {
  field(INP, "BL12I-MO-STEP-06:PROGPARSE.VALA")
}

record(ai, "BL12I-MO-STEP-06:MACROERRS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(M5035) geobrick_eth6")
}

# I3 value 0 to 3 I/O Handshake control
record(mbbi, "BL12I-MO-STEP-06:IO_HANDSHAKE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
  field(ZRST, "No Ack (0)")
  field(ONST, "Dumb term (1)")
  field(TWST, "Fast comms (2)")
  field(THST, "Fastcomms+LF(3)")
  field(INP, "@pmac.proto getIntVar(I3) geobrick_eth6")
}

# I5 PLC Program Control
record(mbbi, "BL12I-MO-STEP-06:PLC_CONTROL") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I5) geobrick_eth6")
  field(ZRVL, "0")
  field(ZRST, "NONE (0)")
  field(ONVL, "1")
  field(ONST, "PLC 0 (1)")
  field(TWVL, "2")
  field(TWST, "PLC 1-31 (2)")
  field(THVL, "3")
  field(THST, "ALL (3)")
}

# I6 Error reporting mode
record(mbbi, "BL12I-MO-STEP-06:ERRREPMODE") {
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I6) geobrick_eth6")
  field(ZRVL, "0")
  field(ONVL, "1")
  field(TWVL, "2")
  field(THVL, "3")
# the <BELL> character is given for invalid commands
  field(ZRST, "BELL(0)")
#the form of the error message is <BELL>{error message}
  field(ONST, "BELL+ERR(1)")
#the <BELL> character is given only for invalid commands from the host; 
# there is no response to invalid commands issued from Turbo PMAC programs.
  field(TWST, "BELL-PRG(2)")
#<BELL><CR>{error message}
  field(THST, "BELL+CR+ERR(3)")
}

# I56 DPRAM ASCII Communications Interrupt
record(bi, "BL12I-MO-STEP-06:DPRAM_COMMS_INT") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I56) geobrick_eth6")
  field(ONAM, "ENABLED")
  field(PINI, "YES")
  field(SCAN, "Passive")
  field(ZNAM, "DISABLED")
}

# I58 DPRAM ASCII Communications Enable
record(bi, "BL12I-MO-STEP-06:DPRAM_COMMS") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getIntVar(I58) geobrick_eth6")
  field(ZNAM, "DISABLED")
  field(ONAM, "ENABLED")
}

# I90 VME Address modifier
record(mbbi, "BL12I-MO-STEP-06:VME_ADDR_MODE") {
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I90) geobrick_eth6")
  field(ZRVL, "0x29")
  field(ONVL, "0x39")
  field(TWVL, "0x09")
  field(ZRST, "16-bit addr")
  field(ONST, "24-bit addr")
  field(TWST, "32-bit addr")
}

# I97 VME DPRAM Base Address Bits A23-A20
record(longin, "BL12I-MO-STEP-06:VME_DPRAMBASE") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I97) geobrick_eth6")
  field(PINI, "YES")
}

# I95 VME Interrupt Level
record(longin, "BL12I-MO-STEP-06:VME_INTLVL") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getHexVar(I95) geobrick_eth6")
  field(PINI, "YES")
}

record(seq, "BL12I-MO-STEP-06:AXIS1:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS2:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS3:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS4:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS5:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS6:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS7:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS8:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS9:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS10:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS11:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS12:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS13:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS14:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS15:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS16:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS17:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS18:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS19:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS20:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS21:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS22:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS23:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS24:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS25:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS26:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS27:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS28:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS29:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS30:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS31:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AXIS32:ReadBack") {
}

record(seq, "BL12I-MO-STEP-06:AxisRB") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS1:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS2:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS3:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS4:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-06:AXIS5:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-06:AXIS6:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-06:AXIS7:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-06:AXIS8:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-06:AxisRB2.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-06:AxisRB2") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS9:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS10:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS11:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS12:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-06:AXIS13:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-06:AXIS14:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-06:AXIS15:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-06:AXIS16:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-06:AxisRB3.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-06:AxisRB3") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS17:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS18:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS19:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS20:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-06:AXIS21:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-06:AXIS22:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-06:AXIS23:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-06:AXIS24:ReadBack.PROC PP")
  field(LNK9, "BL12I-MO-STEP-06:AxisRB4.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DLY9, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
  field(DOL9, "1")
}

record(seq, "BL12I-MO-STEP-06:AxisRB4") {
  field(LNK1, "BL12I-MO-STEP-06:AXIS25:ReadBack.PROC PP")
  field(LNK2, "BL12I-MO-STEP-06:AXIS26:ReadBack.PROC PP")
  field(LNK3, "BL12I-MO-STEP-06:AXIS27:ReadBack.PROC PP")
  field(LNK4, "BL12I-MO-STEP-06:AXIS28:ReadBack.PROC PP")
  field(LNK5, "BL12I-MO-STEP-06:AXIS29:ReadBack.PROC PP")
  field(LNK6, "BL12I-MO-STEP-06:AXIS30:ReadBack.PROC PP")
  field(LNK7, "BL12I-MO-STEP-06:AXIS31:ReadBack.PROC PP")
  field(LNK8, "BL12I-MO-STEP-06:AXIS32:ReadBack.PROC PP")
  field(DLY1, "0")
  field(DLY2, "0.5")
  field(DLY3, "0.5")
  field(DLY4, "0.5")
  field(DLY5, "0.5")
  field(DLY6, "0.5")
  field(DLY7, "0.5")
  field(DLY8, "0.5")
  field(DOL1, "1")
  field(DOL2, "1")
  field(DOL3, "1")
  field(DOL4, "1")
  field(DOL5, "1")
  field(DOL6, "1")
  field(DOL7, "1")
  field(DOL8, "1")
}

record(longin, "BL12I-MO-STEP-06:NAXES") {
  field(PINI, "YES")
  field(VAL, "8")
}

# end(pmacStatus)






#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-ATTN-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,f1.y,SiC filter 1
#% gdatag,motor,rw,f1.y,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:A

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-ATTN-02:POSN:A
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-ATTN-02:POSN:A,filename=motor.edl,box-label=SiC filter stick f1.y

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-ATTN-02:POSN:A")
{
	field(DESC,"SiC filter stick f1.y")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.2")
	field(VBAS,"0")
	field(ACCL,"0.5")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick5,1)")
	field(MRES,"3.175e-06")
	field(PREC,"2")
	field(EGU,"mm")
	field(DHLM,"150")
	field(DLLM,"0")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "3.175e-06")
	field(JVEL, "0.2")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "0.3")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-ATTN-02:POSN:A:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-ATTN-02:POSN:A:ADDR") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that holds the PORT
record(stringout, "BL12I-AL-ATTN-02:POSN:A:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick5")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-ATTN-02:POSN:A:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-ATTN-02:POSN:A:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-ATTN-02:POSN:A.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-ATTN-02:POSN:A:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:A:ELOSS
record(ai, "BL12I-AL-ATTN-02:POSN:A:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-ATTN-02:POSN:A:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-ATTN-02:POSN:A:CHECK_SYNC") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-ATTN-02:POSN:A:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-ATTN-02:POSN:A.RMP CP")
	field(INPB,"BL12I-AL-ATTN-02:POSN:A.REP NPP")
	field(INPC,"BL12I-AL-ATTN-02:POSN:A.MRES NPP")
	field(INPD,"BL12I-AL-ATTN-02:POSN:A.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-ATTN-02:POSN:A:FERRORMAX")
	field(PREC,"2")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:A:FERRORMAX
record(calc, "BL12I-AL-ATTN-02:POSN:A:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-ATTN-02:POSN:A:FERROR.VAL")
	field(INPB,"BL12I-AL-ATTN-02:POSN:A:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"2")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-ATTN-02:POSN:A:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-ATTN-02:POSN:A:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-ATTN-02:POSN:A:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:A:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-ATTN-02:POSN:A:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-ATTN-02:POSN:A:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:A:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-ATTN-02:POSN:A) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:A:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-ATTN-02:POSN:A:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:POSN:A:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:A:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:A.DIR CP")  
  field(INPC, "BL12I-AL-ATTN-02:POSN:A:SCALE")    
  field(OUT, "BL12I-AL-ATTN-02:POSN:A:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-ATTN-02:POSN:A:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-ATTN-02:POSN:A) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:A:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-ATTN-02:POSN:A) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:A:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-ATTN-02:POSN:A:SDIS") {
  field(INPA, "BL12I-AL-ATTN-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-ATTN-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-ATTN-02:POSN:A:HMPOSASLO") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:A.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:A:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-ATTN-02:POSN:A:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-ATTN-02:POSN:A:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1P) geobrick_eth5")
  field(DESC, "SiC filter stick f1.y")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-ATTN-02:POSN:A:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-ATTN-02:POSN:A")
  field(OUT, "BL12I-AL-ATTN-02:HM:M1PV PP")
}

record(stringout, "BL12I-AL-ATTN-02:HM:M1PV"){
}

# define a kill record
record(ao, "BL12I-AL-ATTN-02:POSN:A:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(1) geobrick_eth5")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-ATTN-02:POSN:A:ELOSSVAR") {
  field(CALC, "464+1")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-ATTN-02:POSN:A:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-ATTN-02:POSN:A) geobrick_eth5")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-ATTN-02:POSN:A:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-ATTN-02:POSN:A) geobrick_eth5") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-ATTN-02:POSN:A:HOMED") {
#  field(DESC, "Set homed status for axis 1")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-ATTN-02:POSN:A:HOMEDSET")
#}

#record(calcout, "BL12I-AL-ATTN-02:POSN:A:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-ATTN-02:POSN:A:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m145) geobrick_eth5")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-ATTN-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,f2.y,SiC filter 2
#% gdatag,motor,rw,f2.y,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:B

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-ATTN-02:POSN:B
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-ATTN-02:POSN:B,filename=motor.edl,box-label=Copper filter 1 f2.y

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-ATTN-02:POSN:B")
{
	field(DESC,"Copper filter 1 f2.y")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.2")
	field(VBAS,"0")
	field(ACCL,"0.5")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick5,2)")
	field(MRES,"1.5875e-05")
	field(PREC,"2")
	field(EGU,"mm")
	field(DHLM,"59.117")
	field(DLLM,"-0.783")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "1.5875e-05")
	field(JVEL, "0.2")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "0.3")
	field(OFF, "1.883")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-ATTN-02:POSN:B:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-ATTN-02:POSN:B:ADDR") {
    field(PINI, "YES")
    field(VAL, "2")
}

# record that holds the PORT
record(stringout, "BL12I-AL-ATTN-02:POSN:B:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick5")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-ATTN-02:POSN:B:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-ATTN-02:POSN:B:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-ATTN-02:POSN:B.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-ATTN-02:POSN:B:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:B:ELOSS
record(ai, "BL12I-AL-ATTN-02:POSN:B:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-ATTN-02:POSN:B:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-ATTN-02:POSN:B:CHECK_SYNC") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-ATTN-02:POSN:B:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-ATTN-02:POSN:B.RMP CP")
	field(INPB,"BL12I-AL-ATTN-02:POSN:B.REP NPP")
	field(INPC,"BL12I-AL-ATTN-02:POSN:B.MRES NPP")
	field(INPD,"BL12I-AL-ATTN-02:POSN:B.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-ATTN-02:POSN:B:FERRORMAX")
	field(PREC,"2")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:B:FERRORMAX
record(calc, "BL12I-AL-ATTN-02:POSN:B:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-ATTN-02:POSN:B:FERROR.VAL")
	field(INPB,"BL12I-AL-ATTN-02:POSN:B:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"2")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-ATTN-02:POSN:B:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-ATTN-02:POSN:B:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-ATTN-02:POSN:B:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:B:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-ATTN-02:POSN:B:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-ATTN-02:POSN:B:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:B:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-ATTN-02:POSN:B) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:B:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-ATTN-02:POSN:B:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:POSN:B:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:B:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:B.DIR CP")  
  field(INPC, "BL12I-AL-ATTN-02:POSN:B:SCALE")    
  field(OUT, "BL12I-AL-ATTN-02:POSN:B:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-ATTN-02:POSN:B:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-ATTN-02:POSN:B) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:B:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-ATTN-02:POSN:B) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:B:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-ATTN-02:POSN:B:SDIS") {
  field(INPA, "BL12I-AL-ATTN-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-ATTN-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-ATTN-02:POSN:B:HMPOSASLO") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:B.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:B:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-ATTN-02:POSN:B:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-ATTN-02:POSN:B:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#2P) geobrick_eth5")
  field(DESC, "Copper filter 1 f2.y")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-ATTN-02:POSN:B:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-ATTN-02:POSN:B")
  field(OUT, "BL12I-AL-ATTN-02:HM:M2PV PP")
}

record(stringout, "BL12I-AL-ATTN-02:HM:M2PV"){
}

# define a kill record
record(ao, "BL12I-AL-ATTN-02:POSN:B:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(2) geobrick_eth5")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-ATTN-02:POSN:B:ELOSSVAR") {
  field(CALC, "464+2")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-ATTN-02:POSN:B:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-ATTN-02:POSN:B) geobrick_eth5")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-ATTN-02:POSN:B:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-ATTN-02:POSN:B) geobrick_eth5") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-ATTN-02:POSN:B:HOMED") {
#  field(DESC, "Set homed status for axis 2")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-ATTN-02:POSN:B:HOMEDSET")
#}

#record(calcout, "BL12I-AL-ATTN-02:POSN:B:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-ATTN-02:POSN:B:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m245) geobrick_eth5")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-ATTN-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,f3.y,SiC filter 3
#% gdatag,motor,rw,f3.y,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:C

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-ATTN-02:POSN:C
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-ATTN-02:POSN:C,filename=motor.edl,box-label=Copper filter 2 f3.y

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-ATTN-02:POSN:C")
{
	field(DESC,"Copper filter 2 f3.y")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.2")
	field(VBAS,"0")
	field(ACCL,"0.5")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick5,3)")
	field(MRES,"1.5875e-05")
	field(PREC,"2")
	field(EGU,"mm")
	field(DHLM,"59.1")
	field(DLLM,"-0.8")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "1.5875e-05")
	field(JVEL, "0.2")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "0.3")
	field(OFF, "1.9")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-ATTN-02:POSN:C:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-ATTN-02:POSN:C:ADDR") {
    field(PINI, "YES")
    field(VAL, "3")
}

# record that holds the PORT
record(stringout, "BL12I-AL-ATTN-02:POSN:C:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick5")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-ATTN-02:POSN:C:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-ATTN-02:POSN:C:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-ATTN-02:POSN:C.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-ATTN-02:POSN:C:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:C:ELOSS
record(ai, "BL12I-AL-ATTN-02:POSN:C:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-ATTN-02:POSN:C:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-ATTN-02:POSN:C:CHECK_SYNC") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-ATTN-02:POSN:C:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-ATTN-02:POSN:C.RMP CP")
	field(INPB,"BL12I-AL-ATTN-02:POSN:C.REP NPP")
	field(INPC,"BL12I-AL-ATTN-02:POSN:C.MRES NPP")
	field(INPD,"BL12I-AL-ATTN-02:POSN:C.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-ATTN-02:POSN:C:FERRORMAX")
	field(PREC,"2")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:C:FERRORMAX
record(calc, "BL12I-AL-ATTN-02:POSN:C:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-ATTN-02:POSN:C:FERROR.VAL")
	field(INPB,"BL12I-AL-ATTN-02:POSN:C:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"2")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-ATTN-02:POSN:C:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-ATTN-02:POSN:C:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-ATTN-02:POSN:C:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:C:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-ATTN-02:POSN:C:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-ATTN-02:POSN:C:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:C:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-ATTN-02:POSN:C) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:C:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-ATTN-02:POSN:C:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:POSN:C:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:C:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:C.DIR CP")  
  field(INPC, "BL12I-AL-ATTN-02:POSN:C:SCALE")    
  field(OUT, "BL12I-AL-ATTN-02:POSN:C:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-ATTN-02:POSN:C:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-ATTN-02:POSN:C) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:C:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-ATTN-02:POSN:C) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:C:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-ATTN-02:POSN:C:SDIS") {
  field(INPA, "BL12I-AL-ATTN-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-ATTN-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-ATTN-02:POSN:C:HMPOSASLO") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:C.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:C:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-ATTN-02:POSN:C:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-ATTN-02:POSN:C:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3P) geobrick_eth5")
  field(DESC, "Copper filter 2 f3.y")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-ATTN-02:POSN:C:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-ATTN-02:POSN:C")
  field(OUT, "BL12I-AL-ATTN-02:HM:M3PV PP")
}

record(stringout, "BL12I-AL-ATTN-02:HM:M3PV"){
}

# define a kill record
record(ao, "BL12I-AL-ATTN-02:POSN:C:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(3) geobrick_eth5")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-ATTN-02:POSN:C:ELOSSVAR") {
  field(CALC, "464+3")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-ATTN-02:POSN:C:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-ATTN-02:POSN:C) geobrick_eth5")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-ATTN-02:POSN:C:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-ATTN-02:POSN:C) geobrick_eth5") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-ATTN-02:POSN:C:HOMED") {
#  field(DESC, "Set homed status for axis 3")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-ATTN-02:POSN:C:HOMEDSET")
#}

#record(calcout, "BL12I-AL-ATTN-02:POSN:C:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-ATTN-02:POSN:C:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m345) geobrick_eth5")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-ATTN-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,f4.y,SiC filter 4
#% gdatag,motor,rw,f4.y,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:D

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-ATTN-02:POSN:D
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-ATTN-02:POSN:D,filename=motor.edl,box-label=Copper filter 3 f4.y

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-ATTN-02:POSN:D")
{
	field(DESC,"Copper filter 3 f4.y")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.2")
	field(VBAS,"0")
	field(ACCL,"0.5")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick5,4)")
	field(MRES,"1.5875e-05")
	field(PREC,"2")
	field(EGU,"mm")
	field(DHLM,"59")
	field(DLLM,"-0.9")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "1.5875e-05")
	field(JVEL, "0.2")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "0.3")
	field(OFF, "2")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-ATTN-02:POSN:D:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-ATTN-02:POSN:D:ADDR") {
    field(PINI, "YES")
    field(VAL, "4")
}

# record that holds the PORT
record(stringout, "BL12I-AL-ATTN-02:POSN:D:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick5")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-ATTN-02:POSN:D:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-ATTN-02:POSN:D:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-ATTN-02:POSN:D.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-ATTN-02:POSN:D:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:D:ELOSS
record(ai, "BL12I-AL-ATTN-02:POSN:D:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-ATTN-02:POSN:D:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-ATTN-02:POSN:D:CHECK_SYNC") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-ATTN-02:POSN:D:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-ATTN-02:POSN:D.RMP CP")
	field(INPB,"BL12I-AL-ATTN-02:POSN:D.REP NPP")
	field(INPC,"BL12I-AL-ATTN-02:POSN:D.MRES NPP")
	field(INPD,"BL12I-AL-ATTN-02:POSN:D.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-ATTN-02:POSN:D:FERRORMAX")
	field(PREC,"2")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-ATTN-02:POSN:D:FERRORMAX
record(calc, "BL12I-AL-ATTN-02:POSN:D:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-ATTN-02:POSN:D:FERROR.VAL")
	field(INPB,"BL12I-AL-ATTN-02:POSN:D:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"2")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-ATTN-02:POSN:D:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-ATTN-02:POSN:D:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-ATTN-02:POSN:D:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:D:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-ATTN-02:POSN:D:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-ATTN-02:POSN:D:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.DMOV CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:D:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-ATTN-02:POSN:D) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:D:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-ATTN-02:POSN:D:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-ATTN-02:POSN:D:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:D:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:D.DIR CP")  
  field(INPC, "BL12I-AL-ATTN-02:POSN:D:SCALE")    
  field(OUT, "BL12I-AL-ATTN-02:POSN:D:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-ATTN-02:POSN:D:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-ATTN-02:POSN:D) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-ATTN-02:POSN:D:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-ATTN-02:POSN:D) geobrick_eth5")
  field(FLNK, "BL12I-AL-ATTN-02:POSN:D:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-ATTN-02:POSN:D:SDIS") {
  field(INPA, "BL12I-AL-ATTN-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-ATTN-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-ATTN-02:POSN:D:HMPOSASLO") {
  field(INPA, "BL12I-AL-ATTN-02:POSN:D.MRES CP")
  field(INPB, "BL12I-AL-ATTN-02:POSN:D:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-ATTN-02:POSN:D:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-ATTN-02:POSN:D:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4P) geobrick_eth5")
  field(DESC, "Copper filter 3 f4.y")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-ATTN-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-ATTN-02:POSN:D:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-ATTN-02:POSN:D")
  field(OUT, "BL12I-AL-ATTN-02:HM:M4PV PP")
}

record(stringout, "BL12I-AL-ATTN-02:HM:M4PV"){
}

# define a kill record
record(ao, "BL12I-AL-ATTN-02:POSN:D:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(4) geobrick_eth5")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-ATTN-02:POSN:D:ELOSSVAR") {
  field(CALC, "464+4")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-ATTN-02:POSN:D:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-ATTN-02:POSN:D) geobrick_eth5")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-ATTN-02:POSN:D:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-ATTN-02:POSN:D) geobrick_eth5") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-ATTN-02:POSN:D:HOMED") {
#  field(DESC, "Set homed status for axis 4")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-ATTN-02:POSN:D:HOMEDSET")
#}

#record(calcout, "BL12I-AL-ATTN-02:POSN:D:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-ATTN-02:POSN:D:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m445) geobrick_eth5")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-OP-DCM-01. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,md2.y,Mono diagnostic 2
#% gdatag,motor,rw,md2.y,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-OP-DCM-01:CAM2:Y

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-OP-DCM-01:CAM2:Y
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-OP-DCM-01:CAM2:Y,filename=motor.edl,box-label=Mono diagnostic 2

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-OP-DCM-01:CAM2:Y")
{
	field(DESC,"Mono diagnostic 2")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"3.25")
	field(VBAS,"0")
	field(ACCL,"0.5")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick5,7)")
	field(MRES,"7.9375e-05")
	field(PREC,"2")
	field(EGU,"mm")
	field(DHLM,"2")
	field(DLLM,"-190")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.000254")
	field(JVEL, "3.25")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "3.25")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-OP-DCM-01:CAM2:Y:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-OP-DCM-01:CAM2:Y:ADDR") {
    field(PINI, "YES")
    field(VAL, "7")
}

# record that holds the PORT
record(stringout, "BL12I-OP-DCM-01:CAM2:Y:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick5")
}

# record that holds the SCALE
record(stringout, "BL12I-OP-DCM-01:CAM2:Y:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-OP-DCM-01:CAM2:Y:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-OP-DCM-01:CAM2:Y:ELOSS
record(ai, "BL12I-OP-DCM-01:CAM2:Y:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:CHECK_SYNC") {
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-OP-DCM-01:CAM2:Y:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-OP-DCM-01:CAM2:Y.RMP CP")
	field(INPB,"BL12I-OP-DCM-01:CAM2:Y.REP NPP")
	field(INPC,"BL12I-OP-DCM-01:CAM2:Y.MRES NPP")
	field(INPD,"BL12I-OP-DCM-01:CAM2:Y.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-OP-DCM-01:CAM2:Y:FERRORMAX")
	field(PREC,"2")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-OP-DCM-01:CAM2:Y:FERRORMAX
record(calc, "BL12I-OP-DCM-01:CAM2:Y:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-OP-DCM-01:CAM2:Y:FERROR.VAL")
	field(INPB,"BL12I-OP-DCM-01:CAM2:Y:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"2")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-OP-DCM-01:CAM2:Y:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-OP-DCM-01:CAM2:Y:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-OP-DCM-01:CAM2:Y:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.DMOV CP")
  field(INPB, "BL12I-OP-DCM-01:CAM2:Y:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-OP-DCM-01:CAM2:Y) geobrick_eth5")
  field(FLNK, "BL12I-OP-DCM-01:CAM2:Y:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-OP-DCM-01:CAM2:Y:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-OP-DCM-01:CAM2:Y:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.MRES CP")
  field(INPB, "BL12I-OP-DCM-01:CAM2:Y.DIR CP")  
  field(INPC, "BL12I-OP-DCM-01:CAM2:Y:SCALE")    
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-OP-DCM-01:CAM2:Y:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-OP-DCM-01:CAM2:Y) geobrick_eth5")
  field(FLNK, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-OP-DCM-01:CAM2:Y) geobrick_eth5")
  field(FLNK, "BL12I-OP-DCM-01:CAM2:Y:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-OP-DCM-01:CAM2:Y:SDIS") {
  field(INPA, "BL12I-:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-:HM:HOMING") {
}

record(calcout, "BL12I-OP-DCM-01:CAM2:Y:HMPOSASLO") {
  field(INPA, "BL12I-OP-DCM-01:CAM2:Y.MRES CP")
  field(INPB, "BL12I-OP-DCM-01:CAM2:Y:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-OP-DCM-01:CAM2:Y:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-OP-DCM-01:CAM2:Y:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#7P) geobrick_eth5")
  field(DESC, "Mono diagnostic 2")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "2")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-OP-DCM-01:CAM2:Y:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-OP-DCM-01:CAM2:Y")
  field(OUT, "BL12I-:HM:M7PV PP")
}

record(stringout, "BL12I-:HM:M7PV"){
}

# define a kill record
record(ao, "BL12I-OP-DCM-01:CAM2:Y:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(7) geobrick_eth5")  
  field(VAL, "0")  
}

record(calc, "BL12I-OP-DCM-01:CAM2:Y:ELOSSVAR") {
  field(CALC, "464+7")
  field(PINI, "YES")
}

record(ai, "BL12I-OP-DCM-01:CAM2:Y:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-OP-DCM-01:CAM2:Y) geobrick_eth5")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-OP-DCM-01:CAM2:Y:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-OP-DCM-01:CAM2:Y) geobrick_eth5") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-OP-DCM-01:CAM2:Y:HOMED") {
#  field(DESC, "Set homed status for axis 7")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-OP-DCM-01:CAM2:Y:HOMEDSET")
#}

#record(calcout, "BL12I-OP-DCM-01:CAM2:Y:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-OP-DCM-01:CAM2:Y:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m745) geobrick_eth5")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.top,Vertical top slit blade
#% gdatag,motor,rw,s2.top,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:PLUS

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:Y:PLUS
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:Y:PLUS,filename=motor.edl,box-label=Y Top s2.top

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:Y:PLUS")
{
	field(DESC,"Y Top s2.top")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.75")
	field(VBAS,"0")
	field(ACCL,"0.4")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6,1)")
	field(MRES,"-0.001")
	field(PREC,"4")
	field(EGU,"mm")
	field(DHLM,"26")
	field(DLLM,"-42")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "-0.001")
	field(JVEL, "0.75")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:Y:PLUS:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:Y:PLUS:ADDR") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:Y:PLUS:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:Y:PLUS:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:Y:PLUS:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:PLUS:ELOSS
record(ai, "BL12I-AL-SLITS-02:Y:PLUS:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:Y:PLUS:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:Y:PLUS.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:Y:PLUS.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:Y:PLUS.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:Y:PLUS.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:Y:PLUS:FERRORMAX")
	field(PREC,"4")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:PLUS:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:Y:PLUS:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:Y:PLUS:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:Y:PLUS:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"4")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:Y:PLUS:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-SLITS-02:Y:PLUS:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.DMOV CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:PLUS:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-SLITS-02:Y:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:PLUS:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-SLITS-02:Y:PLUS:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-SLITS-02:Y:PLUS:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:PLUS.DIR CP")  
  field(INPC, "BL12I-AL-SLITS-02:Y:PLUS:SCALE")    
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-SLITS-02:Y:PLUS:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-SLITS-02:Y:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-SLITS-02:Y:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:PLUS:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:HMPOSASLO") {
  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:PLUS:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-SLITS-02:Y:PLUS:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-SLITS-02:Y:PLUS:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#1P) geobrick_eth6")
  field(DESC, "Y Top s2.top")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "4")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-SLITS-02:Y:PLUS:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-SLITS-02:Y:PLUS")
  field(OUT, "BL12I-AL-SLITS-02:HM:M1PV PP")
}

record(stringout, "BL12I-AL-SLITS-02:HM:M1PV"){
}

# define a kill record
record(ao, "BL12I-AL-SLITS-02:Y:PLUS:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(1) geobrick_eth6")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-SLITS-02:Y:PLUS:ELOSSVAR") {
  field(CALC, "464+1")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-SLITS-02:Y:PLUS:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-SLITS-02:Y:PLUS) geobrick_eth6")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-SLITS-02:Y:PLUS) geobrick_eth6") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-SLITS-02:Y:PLUS:HOMED") {
#  field(DESC, "Set homed status for axis 1")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-SLITS-02:Y:PLUS:HOMEDSET")
#}

#record(calcout, "BL12I-AL-SLITS-02:Y:PLUS:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-SLITS-02:Y:PLUS:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m145) geobrick_eth6")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.bottom,Vertical bottom slit blade
#% gdatag,motor,rw,s2.bottom,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:MINUS

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:Y:MINUS
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:Y:MINUS,filename=motor.edl,box-label=Y Bottom s2.bottom

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:Y:MINUS")
{
	field(DESC,"Y Bottom s2.bottom")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.75")
	field(VBAS,"0")
	field(ACCL,"0.4")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6,5)")
	field(MRES,"0.001")
	field(PREC,"4")
	field(EGU,"mm")
	field(DHLM,"42")
	field(DLLM,"-26")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.001")
	field(JVEL, "0.75")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:Y:MINUS:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:Y:MINUS:ADDR") {
    field(PINI, "YES")
    field(VAL, "5")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:Y:MINUS:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:Y:MINUS:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:Y:MINUS:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:MINUS:ELOSS
record(ai, "BL12I-AL-SLITS-02:Y:MINUS:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:Y:MINUS:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:Y:MINUS.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:Y:MINUS.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:Y:MINUS.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:Y:MINUS.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:Y:MINUS:FERRORMAX")
	field(PREC,"4")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:MINUS:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:Y:MINUS:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:Y:MINUS:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:Y:MINUS:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"4")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:Y:MINUS:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-SLITS-02:Y:MINUS:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.DMOV CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:MINUS:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-SLITS-02:Y:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:MINUS:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-SLITS-02:Y:MINUS:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-SLITS-02:Y:MINUS:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:MINUS.DIR CP")  
  field(INPC, "BL12I-AL-SLITS-02:Y:MINUS:SCALE")    
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-SLITS-02:Y:MINUS:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-SLITS-02:Y:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-SLITS-02:Y:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:Y:MINUS:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:HMPOSASLO") {
  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:Y:MINUS:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-SLITS-02:Y:MINUS:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-SLITS-02:Y:MINUS:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#5P) geobrick_eth6")
  field(DESC, "Y Bottom s2.bottom")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "4")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-SLITS-02:Y:MINUS:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-SLITS-02:Y:MINUS")
  field(OUT, "BL12I-AL-SLITS-02:HM:M5PV PP")
}

record(stringout, "BL12I-AL-SLITS-02:HM:M5PV"){
}

# define a kill record
record(ao, "BL12I-AL-SLITS-02:Y:MINUS:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(5) geobrick_eth6")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-SLITS-02:Y:MINUS:ELOSSVAR") {
  field(CALC, "464+5")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-SLITS-02:Y:MINUS:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-SLITS-02:Y:MINUS) geobrick_eth6")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-SLITS-02:Y:MINUS) geobrick_eth6") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-SLITS-02:Y:MINUS:HOMED") {
#  field(DESC, "Set homed status for axis 5")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-SLITS-02:Y:MINUS:HOMEDSET")
#}

#record(calcout, "BL12I-AL-SLITS-02:Y:MINUS:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-SLITS-02:Y:MINUS:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m545) geobrick_eth6")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.out,Horizontal outboard blade
#% gdatag,motor,rw,s2.out,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:PLUS

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:X:PLUS
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:X:PLUS,filename=motor.edl,box-label=X Outboard s2.out

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:X:PLUS")
{
	field(DESC,"X Outboard s2.out")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.75")
	field(VBAS,"0")
	field(ACCL,"0.4")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6,3)")
	field(MRES,"-0.0005")
	field(PREC,"4")
	field(EGU,"mm")
	field(DHLM,"26")
	field(DLLM,"-22")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "-0.0005")
	field(JVEL, "0.75")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:X:PLUS:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:X:PLUS:ADDR") {
    field(PINI, "YES")
    field(VAL, "3")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:X:PLUS:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:X:PLUS:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:X:PLUS:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:PLUS:ELOSS
record(ai, "BL12I-AL-SLITS-02:X:PLUS:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:X:PLUS:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:X:PLUS.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:X:PLUS.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:X:PLUS.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:X:PLUS.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:X:PLUS:FERRORMAX")
	field(PREC,"4")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:PLUS:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:X:PLUS:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:X:PLUS:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:X:PLUS:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"4")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:X:PLUS:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:X:PLUS:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-SLITS-02:X:PLUS:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.DMOV CP")
  field(INPB, "BL12I-AL-SLITS-02:X:PLUS:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-SLITS-02:X:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:PLUS:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-SLITS-02:X:PLUS:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-SLITS-02:X:PLUS:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:X:PLUS.DIR CP")  
  field(INPC, "BL12I-AL-SLITS-02:X:PLUS:SCALE")    
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-SLITS-02:X:PLUS:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-SLITS-02:X:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-SLITS-02:X:PLUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:PLUS:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-SLITS-02:X:PLUS:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-SLITS-02:X:PLUS:HMPOSASLO") {
  field(INPA, "BL12I-AL-SLITS-02:X:PLUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:X:PLUS:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-SLITS-02:X:PLUS:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-SLITS-02:X:PLUS:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#3P) geobrick_eth6")
  field(DESC, "X Outboard s2.out")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "4")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-SLITS-02:X:PLUS:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-SLITS-02:X:PLUS")
  field(OUT, "BL12I-AL-SLITS-02:HM:M3PV PP")
}

record(stringout, "BL12I-AL-SLITS-02:HM:M3PV"){
}

# define a kill record
record(ao, "BL12I-AL-SLITS-02:X:PLUS:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(3) geobrick_eth6")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-SLITS-02:X:PLUS:ELOSSVAR") {
  field(CALC, "464+3")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-SLITS-02:X:PLUS:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-SLITS-02:X:PLUS) geobrick_eth6")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-SLITS-02:X:PLUS:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-SLITS-02:X:PLUS) geobrick_eth6") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-SLITS-02:X:PLUS:HOMED") {
#  field(DESC, "Set homed status for axis 3")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-SLITS-02:X:PLUS:HOMEDSET")
#}

#record(calcout, "BL12I-AL-SLITS-02:X:PLUS:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-SLITS-02:X:PLUS:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m345) geobrick_eth6")
#}

#% macro, SPORT, Asyn port for eloss commands 
# usually PMAC_S<n> for pmacs, the name of the pmacAsynIpPort for bricks
#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy
#% macro, ALLOW_HOMED_SET, Set to a blank to allow this axis to have its homed
# status manually.  This is set to a comment character by default.

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.in,Horizontal inboard blade
#% gdatag,motor,rw,s2.in,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:MINUS

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:X:MINUS
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:X:MINUS,filename=motor.edl,box-label=X Inboard s2.in

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:X:MINUS")
{
	field(DESC,"X Inboard s2.in")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.75")
	field(VBAS,"0")
	field(ACCL,"0.4")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6,4)")
	field(MRES,"0.0005")
	field(PREC,"4")
	field(EGU,"mm")
	field(DHLM,"15")
	field(DLLM,"-26")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.0005")
	field(JVEL, "0.75")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:X:MINUS:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:X:MINUS:ADDR") {
    field(PINI, "YES")
    field(VAL, "4")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:X:MINUS:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:X:MINUS:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:X:MINUS:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:MINUS:ELOSS
record(ai, "BL12I-AL-SLITS-02:X:MINUS:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:X:MINUS:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:X:MINUS.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:X:MINUS.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:X:MINUS.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:X:MINUS.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:X:MINUS:FERRORMAX")
	field(PREC,"4")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:MINUS:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:X:MINUS:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:X:MINUS:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:X:MINUS:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"4")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:X:MINUS:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:X:MINUS:FERRORMAX.VAL")
	field(VAL, "0")
}	
############################################################
#
# Template to distiguish real motor record initiated moves 
# from externally generated moves (eg. from a coordinate system motor).
#
###############################################################

#Calculate if a move was internal or not
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:MR_MIP_INTERNAL") {
  field(DESC, "MR internal")
  field(DTYP, "Soft Channel")
  field(CALC, "(A#0)&&(A#B)")
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.MIP CP")
  field(INPB, "32768")  
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS:MR_MIP_INTERNAL_FLAG PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Cache the internal move flag
record(bo, "BL12I-AL-SLITS-02:X:MINUS:MR_MIP_INTERNAL_FLAG") {
  field(DTYP, "Soft Channel")
  field(ZNAM, "External")
  field(ONAM, "Internal")
  field(VAL, "0")
  field(OMSL, "supervisory")
}

#When DMOV = 1 and mip internal flag is set
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:MR_DMOV") {
  field(DESC, "MR Done")
  field(DTYP, "Soft Channel")
  field(CALC, "(A=1)&&(B=1)")
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.DMOV CP")
  field(INPB, "BL12I-AL-SLITS-02:X:MINUS:MR_MIP_INTERNAL_FLAG")  
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE.PROC PP")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Non-zero")
}

#Write 1 to p47xx
record(longout, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE") {
  field(DESC, "Motor record move")
  field(DTYP, "stream")
  field(VAL, "1")  
  field(OUT, "@pmacCoord.proto moveWrite(BL12I-AL-SLITS-02:X:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:MINUS:MR_RESET_FLAGS")  
}

#Reset the internal move flag
record(seq, BL12I-AL-SLITS-02:X:MINUS:MR_RESET_FLAGS) {
  field(DESC, "Reset MIP flags")
  field(DO1, "0")
  field(LNK1, "BL12I-AL-SLITS-02:X:MINUS:MR_MIP_INTERNAL_FLAG PP")
}

#calc mres to be written
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:MRES_CALC") {
  field(CALC, "B?-A*C:A*C")
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:X:MINUS.DIR CP")  
  field(INPC, "BL12I-AL-SLITS-02:X:MINUS:SCALE")    
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS:MRES_SET PP")    
  field(OOPT, "When Non-zero")  
}

record(ao, "BL12I-AL-SLITS-02:X:MINUS:MRES_SET") {
  field(DTYP, "stream")
  field(OUT, "@pmacCoord.proto mresWrite(BL12I-AL-SLITS-02:X:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE")  
}

#calc off to be written
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:OFF_SET") {
  field(DTYP, "stream")
  field(CALC, "A")
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.OFF CP")
  field(OUT, "@pmacCoord.proto offWrite(BL12I-AL-SLITS-02:X:MINUS) geobrick_eth6")
  field(FLNK, "BL12I-AL-SLITS-02:X:MINUS:MR_MOVE_WRITE")  
}

# disable motor when homing
record(calcout, "BL12I-AL-SLITS-02:X:MINUS:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

# dummy record in case we aren't homing
record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

record(calcout, "BL12I-AL-SLITS-02:X:MINUS:HMPOSASLO") {
  field(INPA, "BL12I-AL-SLITS-02:X:MINUS.MRES CP")
  field(INPB, "BL12I-AL-SLITS-02:X:MINUS:SCALE")  
  field(CALC, "A*B")
  field(OUT, "BL12I-AL-SLITS-02:X:MINUS:HMPOS.ASLO")
}

# reports position of motor without offset
record(ai, "BL12I-AL-SLITS-02:X:MINUS:HMPOS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getVar(#4P) geobrick_eth6")
  field(DESC, "X Inboard s2.in")
  field(SCAN, ".2 second")
  field(SDIS, "BL12I-AL-SLITS-02:HM:HOMING")  
  field(DISV, "0")  
  field(PINI, "YES")
  field(PREC, "4")
  field(LINR, "LINEAR")
  field(EGU, "mm")
}

# at startup, tell autohome template about this motor
record(stringout, "BL12I-AL-SLITS-02:X:MINUS:SETHMPV") {
  field(PINI, "YES")
  field(VAL, "BL12I-AL-SLITS-02:X:MINUS")
  field(OUT, "BL12I-AL-SLITS-02:HM:M4PV PP")
}

record(stringout, "BL12I-AL-SLITS-02:HM:M4PV"){
}

# define a kill record
record(ao, "BL12I-AL-SLITS-02:X:MINUS:KILL") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto killMotor(4) geobrick_eth6")  
  field(VAL, "0")  
}

record(calc, "BL12I-AL-SLITS-02:X:MINUS:ELOSSVAR") {
  field(CALC, "464+4")
  field(PINI, "YES")
}

record(ai, "BL12I-AL-SLITS-02:X:MINUS:ELOSS") {
  field(DTYP, "stream")
  field(INP, "@pmac.proto getEloss(BL12I-AL-SLITS-02:X:MINUS) geobrick_eth6")  
  field(SCAN, "5 second")  
}

record(calcout, "BL12I-AL-SLITS-02:X:MINUS:ELOSSRC") {
  field(DTYP, "stream")
  field(OUT, "@pmac.proto resetEloss(BL12I-AL-SLITS-02:X:MINUS) geobrick_eth6") 
  field(DESC, "Write 0 to A to reset Eloss")
  field(CALC, "A")
  field(A, "0")  
}

#record(bo, "BL12I-AL-SLITS-02:X:MINUS:HOMED") {
#  field(DESC, "Set homed status for axis 4")
#  field(ZNAM, "NOT HOMED")
#  field(ONAM, "HOMED")
#  field(FLNK, "BL12I-AL-SLITS-02:X:MINUS:HOMEDSET")
#}

#record(calcout, "BL12I-AL-SLITS-02:X:MINUS:HOMEDSET") {
#  field(DESC, "Homed status")
#  field(DTYP, "stream")
#  field(CALC, "A")
#  field(INPA, "BL12I-AL-SLITS-02:X:MINUS:HOMED")
#  field(OUT, "@pmac.proto setIntVar(m445) geobrick_eth6")
#}






#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.ys,HD slits vertical size
#% gdatag,motor,rw,s2.ys,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:SIZE

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:Y:SIZE
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:Y:SIZE,filename=motor.edl,box-label=vertical size s2.ys

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:Y:SIZE")
{
	field(DESC,"vertical size s2.ys")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.4")
	field(VBAS,"0")
	field(ACCL,"0.8")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6CS3,7)")
	field(MRES,"0.0001")
	field(PREC,"3")
	field(EGU,"mm")
	field(DHLM,"40")
	field(DLLM,"-40")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.001")
	field(JVEL, "0.4")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:Y:SIZE:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:Y:SIZE:ADDR") {
    field(PINI, "YES")
    field(VAL, "7")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:Y:SIZE:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6CS3")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:Y:SIZE:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:Y:SIZE:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:Y:SIZE.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:Y:SIZE:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:SIZE:ELOSS
record(ai, "BL12I-AL-SLITS-02:Y:SIZE:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:Y:SIZE:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:Y:SIZE:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:Y:SIZE.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:Y:SIZE:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:Y:SIZE:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:Y:SIZE:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:Y:SIZE.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:Y:SIZE.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:Y:SIZE.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:Y:SIZE.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:Y:SIZE:FERRORMAX")
	field(PREC,"3")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:SIZE:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:Y:SIZE:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:Y:SIZE:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:Y:SIZE:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"3")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:Y:SIZE:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:Y:SIZE:FERRORMAX.VAL")
	field(VAL, "0")
}	

record(calcout, "BL12I-AL-SLITS-02:Y:SIZE:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.yc,HD slits vertical centre
#% gdatag,motor,rw,s2.yc,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:CENTER

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:Y:CENTER
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:Y:CENTER,filename=motor.edl,box-label=vertical centre s2.yc

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:Y:CENTER")
{
	field(DESC,"vertical centre s2.yc")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.4")
	field(VBAS,"0")
	field(ACCL,"0.8")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6CS3,6)")
	field(MRES,"0.0001")
	field(PREC,"3")
	field(EGU,"mm")
	field(DHLM,"40")
	field(DLLM,"-40")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.001")
	field(JVEL, "0.4")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:Y:CENTER:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:Y:CENTER:ADDR") {
    field(PINI, "YES")
    field(VAL, "6")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:Y:CENTER:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6CS3")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:Y:CENTER:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:Y:CENTER:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:Y:CENTER.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:Y:CENTER:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:CENTER:ELOSS
record(ai, "BL12I-AL-SLITS-02:Y:CENTER:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:Y:CENTER:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:Y:CENTER:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:Y:CENTER.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:Y:CENTER:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:Y:CENTER:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:Y:CENTER:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:Y:CENTER.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:Y:CENTER.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:Y:CENTER.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:Y:CENTER.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:Y:CENTER:FERRORMAX")
	field(PREC,"3")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:Y:CENTER:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:Y:CENTER:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:Y:CENTER:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:Y:CENTER:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"3")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:Y:CENTER:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:Y:CENTER:FERRORMAX.VAL")
	field(VAL, "0")
}	

record(calcout, "BL12I-AL-SLITS-02:Y:CENTER:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.xs,HD slits horizontal size
#% gdatag,motor,rw,s2.xs,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:SIZE

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:X:SIZE
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:X:SIZE,filename=motor.edl,box-label=horizontal size s2.xs

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:X:SIZE")
{
	field(DESC,"horizontal size s2.xs")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.4")
	field(VBAS,"0")
	field(ACCL,"0.8")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6CS2,7)")
	field(MRES,"0.0001")
	field(PREC,"3")
	field(EGU,"mm")
	field(DHLM,"40")
	field(DLLM,"-40")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.001")
	field(JVEL, "0.4")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:X:SIZE:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:X:SIZE:ADDR") {
    field(PINI, "YES")
    field(VAL, "7")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:X:SIZE:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6CS2")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:X:SIZE:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:X:SIZE:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:X:SIZE.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:X:SIZE:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:SIZE:ELOSS
record(ai, "BL12I-AL-SLITS-02:X:SIZE:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:X:SIZE:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:X:SIZE:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:X:SIZE.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:X:SIZE:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:X:SIZE:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:X:SIZE:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:X:SIZE.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:X:SIZE.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:X:SIZE.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:X:SIZE.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:X:SIZE:FERRORMAX")
	field(PREC,"3")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:SIZE:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:X:SIZE:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:X:SIZE:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:X:SIZE:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"3")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:X:SIZE:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:X:SIZE:FERRORMAX.VAL")
	field(VAL, "0")
}	

record(calcout, "BL12I-AL-SLITS-02:X:SIZE:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}

#% macro, HOME, Prefix for autohome instance. Defaults to BL12I-AL-SLITS-02. If unspecified,
# the template contains enough records to keep the motor record happy

#% macro, __doc__, Basic template, including motor record and associated tags
#% macro, P      , Device Prefix
#% macro, M      , Device Suffix
#% macro, PORT   , Asyn port for motor record
#% macro, ADDR   , Address on controller
#% macro, DESC   , Description, displayed on EDM screen
#% macro, MRES   , Motor Step Size (EGU)
#% macro, DTYP   , DTYP of record
#% macro, DIR    , User Direction
#% macro, VBAS   , Base Velocity (EGU/s)
#% macro, VELO   , Velocity (EGU/s)
#% macro, VMAX   , Max Velocity (EGU/s), defaults to VELO
#% macro, ACCL   , Seconds to Velocity
#% macro, BDST   , BL Distance (EGU)
#% macro, BVEL   , BL Velocity (EGU/s)
#% macro, BACC   , BL Seconds to Veloc.
#% macro, PREC   , Display Precision
#% macro, EGU    , Engineering Units
#% macro, DHLM   , Dial High Limit
#% macro, DLLM   , Dial Low Limit
#% macro, HLSV   , HW Lim. Violation Svr
#% macro, INIT   , Startup commands
#% macro, SREV   , Steps per Revolution
#% macro, RRES   , Readback Step Size (EGU)
#% macro, TWV    , Tweak Step Size (EGU)
#% macro, ERES   , Encoder Step Size (EGU)
#% macro, JAR    , Jog Acceleration (EGU/s^2)
#% macro, UEIP   , Use Encoder If Present
#% macro, URIP   , Use RDBL If Present
#% macro, RDBL   , Readback Location, set URIP = 1 if you specify this
#% macro, RTRY   , Max retry count
#% macro, DLY    , Readback settle time (s)
#% macro, OFF    , User Offset (EGU)
#% macro, RDBD   , Retry Deadband (EGU)
#% macro, FOFF   , Freeze Offset, 0=variable, 1=frozen
#% macro, ADEL   , Alarm monitor deadband (EGU)
#% macro, NTM    , New Target Monitor, only set to 0 for soft motors
#% macro, FEHIGH , HIGH limit for following error
#% macro, FEHIHI , HIHI limit for following error
#% macro, FEHHSV , HIHI alarm severity for following error
#% macro, FEHSV  , HIGH alarm severity for following error
#% macro, SCALE  , Scale factor, if pmacSetAxisScale is used this should be set
#% macro, name   , Object name and gui association name
#% macro, alh    , Set this to alh to add the motor to alarm handler (default), 
#                  set to '#' to comment out alh lines
#% macro, gda_name, Name to export this as to GDA
#% macro, gda_desc, Description to export this as to GDA

# AUTOSAVE: level 0 = before record init, level 1 = before AND after record init
#% autosave 0 DVAL OFF
#% autosave 1 DIR DHLM DLLM TWV VBAS VELO ACCL BDST BVEL BACC RDBD EGU RTRY UEIP URIP DLY PREC DISA DISP FOFF OFF FRAC OMSL JVEL JAR ADEL MDEL
#% archiver 0.5 Monitor
#% archiver 0.5 Monitor RBV
#% archiver 10 Monitor OFF
#% archiver 10 Monitor MRES
#% gdatag,template,simpleMotor,s2.xc,HD slits horizontal centre
#% gdatag,motor,rw,s2.xc,RECORD,Motor
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:CENTER

# This associates an edm screen with the template
# % gui, $(name,undefined), edm, motor.edl, motor=BL12I-AL-SLITS-02:X:CENTER
# % gui, $(name,undefined), edmembed, motor-embed-small.edl, motor=BL12I-AL-SLITS-02:X:CENTER,filename=motor.edl,box-label=horizontal centre s2.xc

# This makes the component icon reflect the status and severity
# % gui, $(name,undefined), status, <pv>.MOVN
# % gui, $(name,undefined), sevr

record(motor,"BL12I-AL-SLITS-02:X:CENTER")
{
	field(DESC,"horizontal centre s2.xc")
	field(DTYP,"asynMotor")
	field(DIR,"Pos")
	field(VELO,"0.4")
	field(VBAS,"0")
	field(ACCL,"0.8")
	field(BDST,"0")
	field(BVEL,"0")
	field(BACC,"0")
	field(OUT,"@asyn(geobrick6CS2,6)")
	field(MRES,"0.0001")
	field(PREC,"3")
	field(EGU,"mm")
	field(DHLM,"40")
	field(DLLM,"-40")
	field(HLSV,"MAJOR")
	field(INIT,"0")
	field(RTRY,"0")
	field(DLY,"0")	
	field(HVEL,"0")
	field(SREV, "200")
	field(RRES, "0")
	field(TWV, "1")
	field(ERES, "0.001")
	field(JVEL, "0.4")
	field(JAR, "1")
	field(UEIP, "0")
	field(URIP, "0")	
	field(RDBL, "")		
	field(VMAX, "1")
	field(OFF, "0")
	field(RDBD, "0")
	field(FOFF, "0")
	field(ADEL, "0")
	field(NTM, "1")
	field(SDIS, "BL12I-AL-SLITS-02:X:CENTER:SDIS.VAL")	
}

# record that holds the ADDR
record(ao, "BL12I-AL-SLITS-02:X:CENTER:ADDR") {
    field(PINI, "YES")
    field(VAL, "6")
}

# record that holds the PORT
record(stringout, "BL12I-AL-SLITS-02:X:CENTER:PORT") {
    field(PINI, "YES")
    field(VAL, "geobrick6CS2")
}

# record that holds the SCALE
record(stringout, "BL12I-AL-SLITS-02:X:CENTER:SCALE") {
    field(PINI, "YES")
    field(VAL, "1")
}

# record that will disable and re-enable record if any of its inputs are non-zero
record(calcout, "BL12I-AL-SLITS-02:X:CENTER:SDIS") {
  field(DESC, "Disable on non-zero input")
  field(VAL, "0")
  field(CALC, "(A|B|C|D|E|F|G|H|I|J|K|L)>0")
  field(OUT, "BL12I-AL-SLITS-02:X:CENTER.DISP PP")
}

# dummy record that looks like a kill command
record(ao, "BL12I-AL-SLITS-02:X:CENTER:KILL") {
    field(VAL, "1")
}

# dummy record that looks like eloss status
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:CENTER:ELOSS
record(ai, "BL12I-AL-SLITS-02:X:CENTER:ELOSS") {
    field(PINI, "YES")
    field(HIHI, "1")
    field(HHSV, "MAJOR")    
}

# dummy record that looks like an eloss reset
record(calcout, "BL12I-AL-SLITS-02:X:CENTER:ELOSSRC") {
}

# check if SYNC has been pressed
record(calcout, "BL12I-AL-SLITS-02:X:CENTER:CHECK_SYNC") {
  field(INPA, "BL12I-AL-SLITS-02:X:CENTER.SYNC CP")  
  field(CALC, "A>0")
  field(OOPT, "When Non-zero")
  field(OUT, "BL12I-AL-SLITS-02:X:CENTER:MR_MOVE_WRITE.PROC PP")
}

# dummy record that looks like a record to notify a CS about a raw motor move
record(longout, "BL12I-AL-SLITS-02:X:CENTER:MR_MOVE_WRITE") {
}

#Record to calculate the following error
record(calc, "BL12I-AL-SLITS-02:X:CENTER:FERROR")
{
	field(DESC,"Following Error")
	field(INPA,"BL12I-AL-SLITS-02:X:CENTER.RMP CP")
	field(INPB,"BL12I-AL-SLITS-02:X:CENTER.REP NPP")
	field(INPC,"BL12I-AL-SLITS-02:X:CENTER.MRES NPP")
	field(INPD,"BL12I-AL-SLITS-02:X:CENTER.ERES NPP")
	field(CALC,"ABS((A*C)-(B*D))")
	field(FLNK,"BL12I-AL-SLITS-02:X:CENTER:FERRORMAX")
	field(PREC,"3")
	field(EGU, "mm")
}

#Record to store the maximum following error
#% archiver 10 Monitor VAL
#% autosave 1 VAL
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-AL-SLITS-02:X:CENTER:FERRORMAX
record(calc, "BL12I-AL-SLITS-02:X:CENTER:FERRORMAX")
{
	field(DESC,"Following Error Max")
	field(INPA,"BL12I-AL-SLITS-02:X:CENTER:FERROR.VAL")
	field(INPB,"BL12I-AL-SLITS-02:X:CENTER:FERRORMAX.VAL")
	field(CALC,"(A>B)?A:B")
	field(HIGH,"0")
	field(HIHI,"0")
	field(HHSV,"NO_ALARM")
	field(HSV, "NO_ALARM")
	field(PREC,"3")
	field(EGU, "mm")
}	

#Record to reset the maximum following error
record(bo, "BL12I-AL-SLITS-02:X:CENTER:FEMAXRESET")
{
	field(DESC,"Reset max following error")
	field(DTYP,"Soft Channel")
	field(OUT, "BL12I-AL-SLITS-02:X:CENTER:FERRORMAX.VAL")
	field(VAL, "0")
}	

record(calcout, "BL12I-AL-SLITS-02:X:CENTER:SDIS") {
  field(INPA, "BL12I-AL-SLITS-02:HM:HOMING CP")
}

record(busy, "BL12I-AL-SLITS-02:HM:HOMING") {
}






#% macro, __doc__, Create some records for reading IOC statistics and details.
# Linux and VxWorks support
#% macro, name, Object name and GUI association name
#% macro, IOCNAME, Device prefix

# % gui, $(name,undefined), edm, ioc_stats_soft.edl, ioc=BL12I-MO-IOC-03
# % gui, $(name,undefined), edmembed, ioc_embed.edl, ioc=BL12I-MO-IOC-03,EDM_FILE=ioc_stats_soft.edl

# Used by Channel Access Security to determine access to this IOC.
record(mbbo, "BL12I-MO-IOC-03:ACCESS")
{
  field(DESC, "BL12I-MO-IOC-03 Acc Mode")
  field(ASG,  "IOCMANAGERS")
  field(PINI, "YES")
  field(ZRST, "Running")
  field(ZRSV, "NO_ALARM")
  field(ONST, "Maintenance")
  field(ONSV, "MINOR")
  field(TWST, "Test")
  field(TWSV, "MINOR")
  field(THST, "OFFLINE")
  field(THSV, "MAJOR")
  info(autosaveFields, "VAL")
}
record(stringin, "BL12I-MO-IOC-03:STARTTOD")
{
    field(DESC, "Time and date of startup")
    field(DTYP, "Soft Timestamp")
    field(PINI, "YES")
    field(INP, "@%Y/%m/%d %H:%M:%S")
}
record(stringin, "BL12I-MO-IOC-03:TOD")
{
    field(DESC, "Current time and date")
    field(DTYP, "Soft Timestamp")
    field(SCAN, "1 second")
    field(INP, "@%Y/%m/%d %H:%M:%S")
}
record(calcout, "BL12I-MO-IOC-03:HEARTBEAT")
{
    field(DESC, "1 Hz counter since boot")
    field(CALC, "(A<2147483647)?A+1:1")
    field(SCAN, "1 second")
    field(INPA, "BL12I-MO-IOC-03:HEARTBEAT")
}
#
# Using an existing internal set of subroutines, this
# PV updates the Access Security mechanism dynamically.
# The .acf file is re-read.
#
record( sub, "BL12I-MO-IOC-03:READACF")
{
    field( DESC, "BL12I-MO-IOC-03 ACF Update")
    field( ASG,  "IOCMANAGERS")
    field( INAM, "asSubInit")
    field( SNAM, "asSubProcess")
    field( BRSV, "INVALID")
}
record(sub, "BL12I-MO-IOC-03:SYSRESET")
{
    field(DESC, "IOC Restart" )
    field(SNAM, "rebootProc")
    field(BRSV,"INVALID")
    field(L,"1")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL12I-MO-IOC-03:CA_CLNT_CNT") {
  field(DESC, "Number of CA Clients")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_clients")
  field(HOPR, "200")
  field(HIHI, "175")
  field(HIGH, "100")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL12I-MO-IOC-03:CA_CONN_CNT") {
  field(DESC, "Number of CA Connections")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ca_connections")
  field(HOPR, "5000")
  field(HIHI, "4500")
  field(HIGH, "4000")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "BL12I-MO-IOC-03:RECORD_CNT") {
  field(DESC, "Number of Records")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@records")
}

record(ai, "BL12I-MO-IOC-03:FD_MAX") {
  field(DESC, "Max File Descriptors")
  field(PINI, "YES")
  field(DTYP, "IOC stats")
  field(INP, "@maxfd")
}

record(ai, "BL12I-MO-IOC-03:FD_CNT") {
  field(DESC, "Allocated File Descriptors")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(FLNK, "BL12I-MO-IOC-03:FD_FREE  PP MS")
  field(INP, "@fd")
}

#% archiver 1 Monitor
#% alh
record(calc, "BL12I-MO-IOC-03:FD_FREE") {
  field(DESC, "Available FDs")
  field(CALC, "B>0?B-A:C")
  field(INPA, "BL12I-MO-IOC-03:FD_CNT  NPP MS")
  field(INPB, "BL12I-MO-IOC-03:FD_MAX  NPP MS")
  field(INPC, "1000")
  field(HOPR, "150")
  field(LOLO, "5")
  field(LOW, "20")
  field(LLSV, "MAJOR")
  field(LSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "BL12I-MO-IOC-03:SYS_CPU_LOAD") {
  field(DESC, "System CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@sys_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL12I-MO-IOC-03:IOC_CPU_LOAD") {
  alias("BL12I-MO-IOC-03:LOAD")
  field(DESC, "IOC CPU Load")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@ioc_cpuload")
  field(EGU, "%")
  field(PREC, "1")
  field(HOPR, "100")
  field(HIHI, "80")
  field(HIGH, "70")
  field(HHSV, "MAJOR")
  field(HSV, "MINOR")
  field(ADEL,"0.5")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

record(ai, "BL12I-MO-IOC-03:CPU_CNT") {
  field(DESC, "Number of CPUs")
  field(DTYP, "IOC stats")
  field(INP, "@no_of_cpus")
  field(PINI, "YES")
}

#% archiver 1 Monitor
#% alh
record(ai, "BL12I-MO-IOC-03:SUSP_TASK_CNT") {
  field(DESC, "Number Suspended Tasks")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@suspended_tasks")
  field(HIHI, "1")
  field(HHSV, "MAJOR")
  info(autosaveFields_pass0, "HOPR LOPR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

#% archiver 1 Monitor
record(ai, "BL12I-MO-IOC-03:MEM_USED") {
  field(DESC, "Allocated Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@allocated_bytes")
  field(EGU, "byte")
}

#% archiver 1 Monitor
record(ai, "BL12I-MO-IOC-03:MEM_FREE") {
  field(DESC, "Free Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@free_bytes")
  field(EGU, "byte")
  info(autosaveFields_pass0, "HOPR LOPR LOW LOLO LSV LLSV")
}

record(ai, "BL12I-MO-IOC-03:MEM_MAX") {
  field(DESC, "Maximum Memory")
  field(SCAN, "I/O Intr")
  field(DTYP, "IOC stats")
  field(INP, "@total_bytes")
  field(EGU, "byte")
}

record(ao, "BL12I-MO-IOC-03:CA_UPD_TIME") {
  field(DESC, "CA Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@ca_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "15")
  field(PINI, "YES")
}

record(ao, "BL12I-MO-IOC-03:FD_UPD_TIME") {
  field(DESC, "FD Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@fd_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "20")
  field(PINI, "YES")
}

record(ao, "BL12I-MO-IOC-03:LOAD_UPD_TIME") {
  field(DESC, "CPU Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@cpu_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(ao, "BL12I-MO-IOC-03:MEM_UPD_TIME") {
  field(DESC, "Memory Check Update Period")
  field(DTYP, "IOC stats")
  field(OUT, "@memory_scan_rate")
  field(EGU, "sec")
  field(DRVH, "60")
  field(DRVL, "1")
  field(HOPR, "60")
  field(VAL, "10")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:ST_SCRIPT1") {
  field(DESC, "Startup Script Part1")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_1")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:ST_SCRIPT2") {
  field(DESC, "Startup Script Part2")
  field(DTYP, "IOC stats")
  field(INP, "@startup_script_2")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:KERNEL_VERS") {
  field(DESC, "Kernel Version")
  field(DTYP, "IOC stats")
  field(INP, "@kernel_ver")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:EPICS_VERS") {
  field(DESC, "EPICS Version")
  field(DTYP, "IOC stats")
  field(INP, "@epics_ver")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:HOSTNAME") {
  field(DESC, "Host Name")
  field(DTYP, "IOC stats")
  field(INP, "@hostname")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:APP_DIR1") {
  field(DESC, "Application Directory Part 1")
  field(DTYP, "IOC stats")
  field(INP, "@pwd1")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:APP_DIR2") {
  field(DESC, "Application Directory Part 2")
  field(DTYP, "IOC stats")
  field(INP, "@pwd2")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:UPTIME") {
  field(DESC, "Elapsed Time since Start")
  field(SCAN, "1 second")
  field(DTYP, "IOC stats")
  field(INP, "@up_time")
  field(PINI, "YES")
}


record(stringin, "BL12I-MO-IOC-03:LOCATION") {
  field(DESC, "LOCATION")
  field(DTYP, "IOC env var")
  field(INP, "@LOCATION")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:ENGINEER") {
  field(DESC, "ENGINEER")
  field(DTYP, "IOC env var")
  field(INP, "@ENGINEER")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_ADDR_LIST") {
  field(DESC, "EPICS_CA_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_ADDR_LIST")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_CONN_TIME") {
  field(DESC, "EPICS_CA_CONN_TMO")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_CONN_TMO")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_AUTO_ADDR") {
  field(DESC, "EPICS_CA_AUTO_ADDR_LIST")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_AUTO_ADDR_LIST")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_RPTR_PORT") {
  field(DESC, "EPICS_CA_REPEATER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_REPEATER_PORT")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_SRVR_PORT") {
  field(DESC, "EPICS_CA_SERVER_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_SERVER_PORT")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_MAX_ARRAY") {
  field(DESC, "EPICS_CA_MAX_ARRAY_BYTES")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_ARRAY_BYTES")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_SRCH_TIME") {
  field(DESC, "EPICS_CA_MAX_SEARCH_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_MAX_SEARCH_PERIOD")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:CA_BEAC_TIME") {
  field(DESC, "EPICS_CA_BEACON_PERIOD")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_CA_BEACON_PERIOD")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:TIMEZONE") {
  field(DESC, "EPICS_TIMEZONE")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TIMEZONE")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:TS_NTP_INET") {
  field(DESC, "EPICS_TS_NTP_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_TS_NTP_INET")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:IOC_LOG_PORT") {
  field(DESC, "EPICS_IOC_LOG_PORT")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_PORT")
  field(PINI, "YES")
}

record(stringin, "BL12I-MO-IOC-03:IOC_LOG_INET") {
  field(DESC, "EPICS_IOC_LOG_INET")
  field(DTYP, "IOC epics var")
  field(INP, "@EPICS_IOC_LOG_INET")
  field(PINI, "YES")
}

record(bo, "BL12I-MO-IOC-03:01HZ_MODE") {
	field(DESC, "01HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:01HZ_UPD_TIME") {
	field(DESC, "01HZ Update Time")
	field(SCAN, "10 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:01HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:02HZ_MODE") {
	field(DESC, "02HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:02HZ_UPD_TIME") {
	field(DESC, "02HZ Update Time")
	field(SCAN, "5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:02HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:05HZ_MODE") {
	field(DESC, "05HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:05HZ_UPD_TIME") {
	field(DESC, "05HZ Update Time")
	field(SCAN, "2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:05HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:1HZ_MODE") {
	field(DESC, "1HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:1HZ_UPD_TIME") {
	field(DESC, "1HZ Update Time")
	field(SCAN, "1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:1HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:2HZ_MODE") {
	field(DESC, "2HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:2HZ_UPD_TIME") {
	field(DESC, "2HZ Update Time")
	field(SCAN, ".5 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:2HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:5HZ_MODE") {
	field(DESC, "5HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:5HZ_UPD_TIME") {
	field(DESC, "5HZ Update Time")
	field(SCAN, ".2 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:5HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}

record(bo, "BL12I-MO-IOC-03:10HZ_MODE") {
	field(DESC, "10HZ Mode")
	field(DOL, "1")
	field(PINI, "YES")
	field(ZNAM, "Relative")
	field(ONAM, "Absolute")
}
record(sub, "BL12I-MO-IOC-03:10HZ_UPD_TIME") {
	field(DESC, "10HZ Update Time")
	field(SCAN, ".1 second")
	field(EGU, "second")
	field(PREC, "5")
	field(MDEL, "0.00001")
	field(HYST, "0.00002")
	field(INAM, "scanMonInit")
	field(SNAM, "scanMon")
	field(HHSV, "MAJOR")
	field(HSV, "MINOR")
	field(LSV, "MINOR")
	field(LLSV, "MAJOR")
	field(BRSV, "INVALID")
	field(INPA, "BL12I-MO-IOC-03:10HZ_MODE")
	field(B,    "5.0")
	field(C,    "10.0")
}


record(calc, "BL12I-MO-IOC-03:SCANMON_SEVR") {
    field(DESC, "ScanMon Max Severity")
    field(SCAN, "1 second")
    field(CALC, "0")
    field(INPA, "BL12I-MO-IOC-03:01HZ_UPD_TIME.SEVR MS")
    field(INPB, "BL12I-MO-IOC-03:02HZ_UPD_TIME.SEVR MS")
    field(INPC, "BL12I-MO-IOC-03:05HZ_UPD_TIME.SEVR MS")
    field(INPD, "BL12I-MO-IOC-03:1HZ_UPD_TIME.SEVR MS")
    field(INPE, "BL12I-MO-IOC-03:2HZ_UPD_TIME.SEVR MS")
    field(INPF, "BL12I-MO-IOC-03:5HZ_UPD_TIME.SEVR MS")
    field(INPG, "BL12I-MO-IOC-03:10HZ_UPD_TIME.SEVR MS")
}







record(asyn,"BL12I-MO-IOC-03:ASYN")
{
    field(DTYP,"asynRecordDevice")
    field(PORT,"")
    field(ADDR,"0")
    field(OMAX,"1024")
    field(IMAX,"40960")
}







# This associates an edm screen with the template
# % gui, , edm, save_restoreStatus_more.edl, P=BL12I-MO-IOC-03:SR

# This makes the component icon reflect the status and severity
# % gui, , sevr
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-MO-IOC-03:SR:RRSTATUS
record(mbbo,"BL12I-MO-IOC-03:SR:RRSTATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}

record(stringout,"BL12I-MO-IOC-03:SR:RRSTATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}

record(stringout,"BL12I-MO-IOC-03:SR:RRTIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}

# % gui, , sevr
#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-MO-IOC-03:SR:SRSTATUS
record(mbbo,"BL12I-MO-IOC-03:SR:SRSTATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRST,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}

record(bo,"BL12I-MO-IOC-03:SR:SRHEARTBT") {
	field(DTYP,"Soft Channel")
}

record(stringout,"BL12I-MO-IOC-03:SR:SRSTATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}

record(stringout,"BL12I-MO-IOC-03:SR:SRRECENTST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}






record(stringout,"BL12I-MO-IOC-03:SR:0:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"BL12I-MO-IOC-03:SR:0:STATE") {
	field(DTYP,"Soft Channel")
}

#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-MO-IOC-03:SR:0:STATUS
record(mbbo,"BL12I-MO-IOC-03:SR:0:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"BL12I-MO-IOC-03:SR:0:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"BL12I-MO-IOC-03:SR:0:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}

record(stringout,"BL12I-MO-IOC-03:SR:1:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"BL12I-MO-IOC-03:SR:1:STATE") {
	field(DTYP,"Soft Channel")
}

#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-MO-IOC-03:SR:1:STATUS
record(mbbo,"BL12I-MO-IOC-03:SR:1:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"BL12I-MO-IOC-03:SR:1:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"BL12I-MO-IOC-03:SR:1:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}

record(stringout,"BL12I-MO-IOC-03:SR:2:NAME") {
	field(VAL,"Not In Use")
	field(DTYP,"Soft Channel")
}
record(longout,"BL12I-MO-IOC-03:SR:2:STATE") {
	field(DTYP,"Soft Channel")
}

#% alh $SEVRCOMMAND UP_ANY /dls_sw/tools/bin/dls-alh-handler.py BL12I-MO-IOC-03:SR:2:STATUS
record(mbbo,"BL12I-MO-IOC-03:SR:2:STATUS") {
	field(DTYP,"Soft Channel")
	field(NOBT,"3")
	field(ONVL,"1")
	field(TWVL,"2")
	field(THVL,"3")
	field(FRVL,"4")
	field(ZRST,"No Status")
	field(ONST,"Failure")
	field(TWST,"Warning")
	field(THST,"Seq Fail")
	field(FRST,"Ok")
	field(ONSV, "MAJOR")
	field(TWSV, "MINOR")
	field(THSV, "MINOR")
}
record(stringout,"BL12I-MO-IOC-03:SR:2:STATUSST") {
	field(DTYP,"Soft Channel")
	field(VAL,"Status unknown")
}
record(stringout,"BL12I-MO-IOC-03:SR:2:TIME") {
	field(DTYP,"Soft Channel")
	field(VAL,"Not yet saved")
}






#! Generated by VisualDCT v2.6

# Template with general purpose calc record. 
# For userinterface see\nthe corresponding calc.edl EDM screen.
#
# Macros:
# P: Device base PV name (prefix)
# S: Device instance PV name
# ADEL: Archiver deadband for the calc record
#%autosave 0 SCAN PREC EGU CALC INPA INPB INPC INPD INPE INPF A B C D E F
#% archiver 0.1 Monitor
record(calc, "BL12I-MO-IOC-03:CALC") {
  field(DESC, "Calculation record")
  field(SCAN, "Passive")
  field(PREC, "4")
  field(PINI, "YES")
  field(ADEL, "0")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:DISA") {
  field(DESC, "disable calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(OUT, "BL12I-MO-IOC-03:CALC.DISA PP")
  field(ZNAM, "enable")
  field(ONAM, "disable")
}

#% autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPA:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPA:FIELD.D PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPA:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPA CA")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPA:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPA:FIELD.AA PP MS")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPB:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPB:FIELD.AA PP")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPB:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPB:FIELD.D PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPB:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPB CA")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPC:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPC:FIELD.AA PP")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPC:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPC:FIELD.D PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPC:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPC CA")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPD:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPD CA")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPD:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPD:FIELD.D PP")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPD:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPD:FIELD.AA PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPE:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPE CA")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPE:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPE:FIELD.AA PP")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPE:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPE:FIELD.D PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPF:FIELD") {
  field(DESC, "Generate INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "AA!=''")
  field(OOPT, "When Non-zero")
  field(DOPT, "Use OCAL")
  field(OCAL, "D?$P('%s CPP',AA):$P('%s CA',AA)")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPF CA")
}

#%autosave 0 VAL
record(bo, "BL12I-MO-IOC-03:CALC:INPF:MON") {
  field(DESC, "select to monitor input")
  field(SCAN, "Passive")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(VAL, "0")
  field(ZNAM, "off")
  field(ONAM, "on")
  field(IVOA, "Don't drive outputs")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPF:FIELD.D PP")
}

#%autosave 0 VAL
record(stringout, "BL12I-MO-IOC-03:CALC:INPF:PV") {
  field(DESC, "PV name for calculation")
  field(PINI, "YES")
  field(DTYP, "Soft Channel")
  field(MPST, "Always")
  field(APST, "Always")
  field(IVOA, "Set output to IVOV")
  field(IVOV, "''")
  field(OUT, "BL12I-MO-IOC-03:CALC:INPF:FIELD.AA PP")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPA:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPA CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPB:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPB CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPC:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPC CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPD:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPD CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPE:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPE CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

record(scalcout, "BL12I-MO-IOC-03:CALC:INPF:CLEAR") {
  field(DESC, "Clear INPA field")
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "Soft Channel")
  field(CALC, "(' ')")
  field(OUT, "BL12I-MO-IOC-03:CALC.INPF CA")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
}

#% autosave 0 VAL
record(stringin, "BL12I-MO-IOC-03:CALC:DESC") {
  field(PINI, "YES")
  field(VAL, "Calculation Output")
}


